[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the workshop",
    "section": "",
    "text": "This site presents materials for the short course Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data to be taught at the 2025 Joint Statistical Meetings (JSM) in Nashville, TN.\nThis course aims to equip participants with the skills to apply tidy principles to survival analysis, fostering a more organized and reproducible approach to data analysis in R.\nIn a tidyverse approach, we apply consistent data workflows to survival analysis tasks. This means using tibble data frames and dplyr for data preparation, keeping outputs tidy (one row per observation or estimate), and leveraging ggplot2 for visualization. For example, one might create the survival outcome as a new column using Surv(time, status) within a dplyr pipeline, fit models and then use broom to tidy() model outputs into data frames, and produce publication-quality plots with ggplot2 or ggsurvfit. The goal is a reproducible workflow where raw data are transformed, analyzed, and visualized seamlessly.\nTarget Audience: Statisticians, data analysts, researchers, and students interested in survival analysis who are familiar with R and the Tidyverse."
  },
  {
    "objectID": "index.html#time-and-place",
    "href": "index.html#time-and-place",
    "title": "Welcome to the workshop",
    "section": "Time and Place",
    "text": "Time and Place\n\nSunday, Aug 3: 8:30 AM - 12:30 PM\nMusic City Center | Room: CC-110A"
  },
  {
    "objectID": "index.html#instructor-profile",
    "href": "index.html#instructor-profile",
    "title": "Welcome to the workshop",
    "section": "Instructor Profile",
    "text": "Instructor Profile\n\nLu Mao, PhD\n\nAssociate Professor of Biostatistics at UW-Madison\nMethodologic research\n\nR01HL149875: Novel Statistical Methods for Complex Time-to-Event Data in Cardiovascular Clinical Trials (12/01/2019 – 07/31/2028)\nDMS2015526: Randomized Trials with Non-Compliance (07/01/2020 – 06/30/2024)\n\nCollaborative research\n\nCardiovascular disease, cancer, radiology, behavioral health interventions\n\nTeaching\n\nSurvival Analysis: Theory and Methods (UW; 2020 - 2025)\n\nEditorial service\n\nStatistical Editor, JACC Journals\nAssociate Editor, Statistics for Biopharmaceutical Research"
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "Welcome to the workshop",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nUnderstand the fundamentals of survival analysis, including key concepts such as censored data, survival functions, and hazard functions.\nUtilize R’s Tidyverse packages to manipulate, visualize, and analyze survival data.\nFit and interpret survival models using the survival and survminer packages in conjunction with Tidyverse functions.\nCreate clear and informative visualizations of survival data, including Kaplan-Meier curves and survival distributions.\nCommunicate survival analysis results effectively using tidy principles."
  },
  {
    "objectID": "index.html#outline",
    "href": "index.html#outline",
    "title": "Welcome to the workshop",
    "section": "Outline",
    "text": "Outline\n\n1. Introduction to Survival Analysis (30 min)\n\n1.1 Key concepts: survival functions, hazard functions, and censoring\n1.2 German breast cancer study: a working example\n1.3 Overview of survival analysis with survival package\n\n2. Data Manipulation with Tidyverse (45 min)\n\n2.1 Importing and cleaning survival data\n2.2 Using dplyr for data manipulation\n2.3 Simple visualization of follow-up data with ggplot2\n2.4 “Table 1” with gtsummary\n\n3. Nonparametric Survival Analysis (50 min)\n\n3.1 Tabulation of summary statistics with gtsummary\n3.2 Visualing Kaplan-Meier curves with ggsurvfit (or survminer)\n3.3 Tidy analysis of competing risks using tidycmprsk\n\n4. Cox proportional hazards regression (40 min)\n\n4.1 Tabulating regression results with gtsummary\n4.2 Model diagnostics and residual plots with survminer\n4.3 Fine-Gray model for competing risks with tidycmprsk\n\n5. Machine learning using tidymodels (50 min)\n\n5.1 Modeling basics\n5.2 Using the censored package for survival models"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Module 1. Introduction",
    "section": "",
    "text": "Section slides here. (To convert html to pdf, press E \\(\\to\\) Print \\(\\to\\) Destination: Save to pdf)\n\n\n\n\n\nShow the code\n# -------------------------------------------\n# Survival Analysis: Module 1 Code\n# -------------------------------------------\n\n# Load necessary package\nlibrary(survival)\n\n# ---------------------------\n# 1. Load Datasets\n# ---------------------------\n\n# Load mortality-only data\ngbc_mort &lt;- read.table(\"data/gbc_mort.txt\", header = TRUE)\nhead(gbc_mort)\n\n# Load mortality + relapse data\ngbc &lt;- read.table(\"data/gbc.txt\", header = TRUE)\nhead(gbc)\n\n# ---------------------------\n# 2. Prepare Dataset for Relapse-Free Survival\n# ---------------------------\n\n# Sort by subject ID and event time\ngbc &lt;- gbc[order(gbc$id, gbc$time), ]\n\n# Keep first event per subject\ndf &lt;- gbc[!duplicated(gbc$id), ]\n\n# Collapse relapse/death to single composite outcome\ndf$status &lt;- ifelse(df$status &gt; 0, 1, 0)\nhead(df)\n\n# ---------------------------\n# 3. Kaplan-Meier Estimation\n# ---------------------------\n\n# Fit Kaplan-Meier curves by hormone treatment\nkm_fit &lt;- survfit(Surv(time, status) ~ hormone, data = df)\n\n# Print KM summary\nsummary(km_fit, times = c(6, 12, 24, 36))\n\n# Plot KM curves with CI\nplot(km_fit, ylim = c(0, 1), xlab = \"Time (months)\",\n     ylab = \"Relapse-free survival probability\",\n     col = c(\"red\", \"blue\"), conf.int = TRUE)\nlegend(\"bottomleft\", col = c(\"red\", \"blue\"), lty = 1,\n       legend = c(\"No hormone\", \"Hormone\"))\n\n# ---------------------------\n# 4. Log-Rank Test\n# ---------------------------\n\n# Compare survival curves by treatment\nlgr_obj &lt;- survdiff(Surv(time, status) ~ hormone, data = df)\nlgr_obj\n\n# Stratified test by menopausal status\nsurvdiff(Surv(time, status) ~ hormone + strata(meno), data = df)\n\n# ---------------------------\n# 5. Cox Proportional Hazards Model\n# ---------------------------\n\n# Fit Cox PH model with multiple covariates\ncox_fit &lt;- coxph(Surv(time, status) ~ hormone + meno + age + grade +\n                   size + prog + estrg, data = df)\nsummary(cox_fit)\n\n# Extract estimates and covariance matrix\nbeta &lt;- cox_fit$coefficients\nvbeta &lt;- vcov(cox_fit)\ncoef(summary(cox_fit))\n\n# ---------------------------\n# 6. Survival Prediction\n# ---------------------------\n\n# Define new subject's covariates\nnew_data &lt;- data.frame(hormone = 1, meno = 1, \n                       age = 45, grade = 2,\n                       size = 20, prog = 100,\n                       estrg = 100)\n\n# Predict survival probabilities\npredicted_survival &lt;- survfit(cox_fit, newdata = new_data,\n                              times = c(6, 12, 24, 36))\nsummary(predicted_survival)\n\n# Plot predicted survival function\nplot(predicted_survival, ylim = c(0, 1), xlab = \"Time (months)\",\n     ylab = \"Predicted survival probability\", conf.int = TRUE)\n\n# ---------------------------\n# 7. Model Diagnostics\n# ---------------------------\n\n# Test proportional hazards assumption\nph_test &lt;- cox.zph(cox_fit)\nph_test\n\n# Plot Schoenfeld residuals\npar(mfrow = c(2, 4))  # 2 rows, 4 columns\nplot(ph_test, se = TRUE, col = \"blue\", lwd = 2)\n\n# ---------------------------\n# 8. Check Functional Form of Covariates\n# ---------------------------\n\n# Extract martingale residuals\nmart_resid &lt;- residuals(cox_fit, type = \"martingale\")\n\n# Plot residuals vs quantitative covariates\npar(mfrow = c(1, 4))  # 1 row, 4 plots\n\nplot(df$age, mart_resid, xlab = \"Age\", ylab = \"Martingale Residuals\",\n     main = \"Age\")\nlines(lowess(df$age, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$size, mart_resid, xlab = \"Tumor Size\", ylab = \"Martingale Residuals\",\n     main = \"Tumor Size\")\nlines(lowess(df$size, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$prog, mart_resid, xlab = \"Progesterone\", ylab = \"Martingale Residuals\",\n     main = \"Progesterone\")\nlines(lowess(df$prog, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$estrg, mart_resid, xlab = \"Estrogen\", ylab = \"Martingale Residuals\",\n     main = \"Estrogen\")\nlines(lowess(df$estrg, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\n# ---------------------------\n# 9. Addressing Violations\n# ---------------------------\n\n# Dichotomize age at 40, stratify on grade\ndf$age40 &lt;- ifelse(df$age &lt; 40, 0, 1)\n\ncox_fit2 &lt;- coxph(Surv(time, status) ~ hormone + meno + age40 +\n                    size + prog + estrg + strata(grade), data = df)\nsummary(cox_fit2)",
    "crumbs": [
      "Home",
      "Module 1. Introduction"
    ]
  },
  {
    "objectID": "intro.html#slides",
    "href": "intro.html#slides",
    "title": "Module 1. Introduction",
    "section": "",
    "text": "Section slides here. (To convert html to pdf, press E \\(\\to\\) Print \\(\\to\\) Destination: Save to pdf)",
    "crumbs": [
      "Home",
      "Module 1. Introduction"
    ]
  },
  {
    "objectID": "intro.html#r-code",
    "href": "intro.html#r-code",
    "title": "Module 1. Introduction",
    "section": "",
    "text": "Show the code\n# -------------------------------------------\n# Survival Analysis: Module 1 Code\n# -------------------------------------------\n\n# Load necessary package\nlibrary(survival)\n\n# ---------------------------\n# 1. Load Datasets\n# ---------------------------\n\n# Load mortality-only data\ngbc_mort &lt;- read.table(\"data/gbc_mort.txt\", header = TRUE)\nhead(gbc_mort)\n\n# Load mortality + relapse data\ngbc &lt;- read.table(\"data/gbc.txt\", header = TRUE)\nhead(gbc)\n\n# ---------------------------\n# 2. Prepare Dataset for Relapse-Free Survival\n# ---------------------------\n\n# Sort by subject ID and event time\ngbc &lt;- gbc[order(gbc$id, gbc$time), ]\n\n# Keep first event per subject\ndf &lt;- gbc[!duplicated(gbc$id), ]\n\n# Collapse relapse/death to single composite outcome\ndf$status &lt;- ifelse(df$status &gt; 0, 1, 0)\nhead(df)\n\n# ---------------------------\n# 3. Kaplan-Meier Estimation\n# ---------------------------\n\n# Fit Kaplan-Meier curves by hormone treatment\nkm_fit &lt;- survfit(Surv(time, status) ~ hormone, data = df)\n\n# Print KM summary\nsummary(km_fit, times = c(6, 12, 24, 36))\n\n# Plot KM curves with CI\nplot(km_fit, ylim = c(0, 1), xlab = \"Time (months)\",\n     ylab = \"Relapse-free survival probability\",\n     col = c(\"red\", \"blue\"), conf.int = TRUE)\nlegend(\"bottomleft\", col = c(\"red\", \"blue\"), lty = 1,\n       legend = c(\"No hormone\", \"Hormone\"))\n\n# ---------------------------\n# 4. Log-Rank Test\n# ---------------------------\n\n# Compare survival curves by treatment\nlgr_obj &lt;- survdiff(Surv(time, status) ~ hormone, data = df)\nlgr_obj\n\n# Stratified test by menopausal status\nsurvdiff(Surv(time, status) ~ hormone + strata(meno), data = df)\n\n# ---------------------------\n# 5. Cox Proportional Hazards Model\n# ---------------------------\n\n# Fit Cox PH model with multiple covariates\ncox_fit &lt;- coxph(Surv(time, status) ~ hormone + meno + age + grade +\n                   size + prog + estrg, data = df)\nsummary(cox_fit)\n\n# Extract estimates and covariance matrix\nbeta &lt;- cox_fit$coefficients\nvbeta &lt;- vcov(cox_fit)\ncoef(summary(cox_fit))\n\n# ---------------------------\n# 6. Survival Prediction\n# ---------------------------\n\n# Define new subject's covariates\nnew_data &lt;- data.frame(hormone = 1, meno = 1, \n                       age = 45, grade = 2,\n                       size = 20, prog = 100,\n                       estrg = 100)\n\n# Predict survival probabilities\npredicted_survival &lt;- survfit(cox_fit, newdata = new_data,\n                              times = c(6, 12, 24, 36))\nsummary(predicted_survival)\n\n# Plot predicted survival function\nplot(predicted_survival, ylim = c(0, 1), xlab = \"Time (months)\",\n     ylab = \"Predicted survival probability\", conf.int = TRUE)\n\n# ---------------------------\n# 7. Model Diagnostics\n# ---------------------------\n\n# Test proportional hazards assumption\nph_test &lt;- cox.zph(cox_fit)\nph_test\n\n# Plot Schoenfeld residuals\npar(mfrow = c(2, 4))  # 2 rows, 4 columns\nplot(ph_test, se = TRUE, col = \"blue\", lwd = 2)\n\n# ---------------------------\n# 8. Check Functional Form of Covariates\n# ---------------------------\n\n# Extract martingale residuals\nmart_resid &lt;- residuals(cox_fit, type = \"martingale\")\n\n# Plot residuals vs quantitative covariates\npar(mfrow = c(1, 4))  # 1 row, 4 plots\n\nplot(df$age, mart_resid, xlab = \"Age\", ylab = \"Martingale Residuals\",\n     main = \"Age\")\nlines(lowess(df$age, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$size, mart_resid, xlab = \"Tumor Size\", ylab = \"Martingale Residuals\",\n     main = \"Tumor Size\")\nlines(lowess(df$size, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$prog, mart_resid, xlab = \"Progesterone\", ylab = \"Martingale Residuals\",\n     main = \"Progesterone\")\nlines(lowess(df$prog, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$estrg, mart_resid, xlab = \"Estrogen\", ylab = \"Martingale Residuals\",\n     main = \"Estrogen\")\nlines(lowess(df$estrg, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\n# ---------------------------\n# 9. Addressing Violations\n# ---------------------------\n\n# Dichotomize age at 40, stratify on grade\ndf$age40 &lt;- ifelse(df$age &lt; 40, 0, 1)\n\ncox_fit2 &lt;- coxph(Surv(time, status) ~ hormone + meno + age40 +\n                    size + prog + estrg + strata(grade), data = df)\nsummary(cox_fit2)",
    "crumbs": [
      "Home",
      "Module 1. Introduction"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "sec1.html#outline",
    "href": "sec1.html#outline",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Outline",
    "text": "Outline\n\nExamples and regulatory guidelines\nTraditional methods\n\nTime to first event\nWeighted total events (Wcompo package)\n\nWin ratio and hierarchical endpoints\n\nThe estimand issue"
  },
  {
    "objectID": "sec1.html#time-to-event-data",
    "href": "sec1.html#time-to-event-data",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Time-to-Event Data",
    "text": "Time-to-Event Data\n\nA common type of outcome in medical and clinical studies\n\nStarting point: Randomization, diagnosis, enrollment, birth, etc.\n\nEndpoint (Event of interest): Death, disease onset, hospitalization, etc.\n\nEngineering: Failure times of machines or components (reliability)\nSocial sciences: Time to job change, dropout, or event occurrence\n\n\nRight censoring:\n\nEvent not observed within the follow-up period\nDue to study ending, dropout, or loss to follow-up\nWe only know:\n\\[\nT &gt; C\n\\] where \\(T\\) is event time and \\(C\\) is censoring time"
  },
  {
    "objectID": "sec1.html#censoring",
    "href": "sec1.html#censoring",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Censoring",
    "text": "Censoring\n\nRight censoring:\n\nEvent not observed within the follow-up period\nDue to study ending, dropout, or loss to follow-up\nWe only know:\n\\[\nT &gt; C\n\\] where ( T ) is event time and ( C ) is censoring time"
  },
  {
    "objectID": "sec1.html#follow-up-swimmer-plot",
    "href": "sec1.html#follow-up-swimmer-plot",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Follow-up (Swimmer) Plot",
    "text": "Follow-up (Swimmer) Plot\n\nA rat tumorigenicity study"
  },
  {
    "objectID": "sec1.html#basic-estimands",
    "href": "sec1.html#basic-estimands",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Basic Estimands",
    "text": "Basic Estimands\n\nSurvival function: \\(S(t) = \\Pr(T &gt; t)\\)\n\nProbability subject survives beyond time \\(t\\)\n\nHazard function:\n\\[\n\\lambda(t) = \\lim_{\\Delta t \\to 0} \\frac{\\Pr(t \\leq T &lt; t + \\Delta t \\mid T \\geq t)}{\\Delta t}\n\\]\n\nInstantaneous risk of failure at time \\(t\\)\n\nRelationship \\[\nS(t) = \\exp\\left(-\\int_0^t \\lambda(u) \\mathrm{d}u\\right)\n\\]\n\nCumulative hazard function: \\(\\Lambda(t) = \\int_0^t \\lambda(u) \\mathrm{d}u\\)"
  },
  {
    "objectID": "sec1.html#observed-censored-data",
    "href": "sec1.html#observed-censored-data",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Observed (Censored) Data",
    "text": "Observed (Censored) Data\n\nNotation: \\((X, \\delta)\\)\n\n\\(X=\\min(T, C)\\): observation time (event or censoring)\n\\(\\delta = I(T\\leq C)\\): event indicator (1 for event, 0 for censoring)\n\nData format\n\n# time = X, status = delta (tidy format)\n    id    time status\n1     1     5     1\n2     2     3     0\n3     3     8     1\n4     4     2     0\n5     5     6     1\n# Alternatively \n    id    time \n1     1     5   \n2     2     3+  \n3     3     8  \n4     4     2+  \n5     5     6"
  },
  {
    "objectID": "sec1.html#s",
    "href": "sec1.html#s",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "s",
    "text": "s"
  },
  {
    "objectID": "sec1.html#german-breast-cancer-gbc-study",
    "href": "sec1.html#german-breast-cancer-gbc-study",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "German Breast Cancer (GBC) Study",
    "text": "German Breast Cancer (GBC) Study\n\nStudy Information\n\nPopulation: 686 patients with node-positive breast cancer\n\nObjective: Assess if tamoxifen + chemo reduces mortality/relapse\n\nBaseline info: Age, tumor size, hormone levels, menopausal status, etc.\n\nFollow-up: Median 44 months\n\n171 deaths \\(\\to\\) exact times known\n\n515 censored \\(\\to\\) survival time \\(&gt;\\) censoring time\n\n\nData sets:\n\nMortality data: https://lmaowisc.github.io/tidysurv/data/gbc_mort.txt\nMortality + relapse: https://lmaowisc.github.io/tidysurv/data/gbc.txt\nDownload and save in a data folder under your root directory"
  },
  {
    "objectID": "sec1.html#data-format",
    "href": "sec1.html#data-format",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Data Format",
    "text": "Data Format\n\n# Load mortality data\ngbc_mort &lt;- read.table(\"data/gbc_mort.txt\", header = TRUE)\n# Check the first few rows of the data frame\nhead(gbc_mort)\n\n  id      time status hormone age meno size grade nodes prog estrg\n1  1 74.819672      0       1  38    1   18     3     5  141   105\n2  2 65.770492      0       1  52    1   20     1     1   78    14\n3  3 47.737705      1       1  47    1   30     2     1  422    89\n4  4  4.852459      0       1  40    1   24     1     3   25    11\n5  5 61.081967      0       2  64    2   19     2     1   19     9\n6  6 63.377049      0       2  49    2   56     1     3  356    64\n\n# The data frame 'gbc_mort' contains:\n#  time:   time (months) to death or censoring\n#  status: event indicator (1 = death, 0 = censoring)\n# hormone: Hormone therapy (1 = no, 2 = yes); age: Age at diagnosis (years);\n# meno: Menopausal status (1 = no, 2 = yes); size: Tumor size (mm); grade: Tumor grade (1–3);\n# nodes: Number of positive lymph nodes; prog: Progesterone receptor level (fmol/mg); estrg:\n# Estrogen receptor level (fmol/mg)."
  },
  {
    "objectID": "sec1.html#data-format-i",
    "href": "sec1.html#data-format-i",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Data Format (I)",
    "text": "Data Format (I)\n\nDeath only\n\n\n# Load mortality data\ngbc_mort &lt;- read.table(\"data/gbc_mort.txt\", header = TRUE)\n# Check the first few rows of the data frame\nhead(gbc_mort)\n\n  id      time status hormone age meno size grade nodes prog estrg\n1  1 74.819672      0       1  38    1   18     3     5  141   105\n2  2 65.770492      0       1  52    1   20     1     1   78    14\n3  3 47.737705      1       1  47    1   30     2     1  422    89\n4  4  4.852459      0       1  40    1   24     1     3   25    11\n5  5 61.081967      0       2  64    2   19     2     1   19     9\n6  6 63.377049      0       2  49    2   56     1     3  356    64\n\n# The data frame 'gbc_mort' contains:\n#  time:   time (months) to death or censoring\n#  status: event indicator (1 = death, 0 = censoring)\n# hormone: Hormone therapy (1 = no, 2 = yes); age: Age at diagnosis (years);\n# meno: Menopausal status (1 = no, 2 = yes); size: Tumor size (mm); grade: Tumor grade (1–3);\n# nodes: Number of positive lymph nodes; prog: Progesterone receptor level (fmol/mg); estrg:\n# Estrogen receptor level (fmol/mg)."
  },
  {
    "objectID": "sec1.html#data-format-ii",
    "href": "sec1.html#data-format-ii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Data Format (II)",
    "text": "Data Format (II)\n\nMortality + relapse\n\n\n# Load mortality + relapse data\ngbc &lt;- read.table(\"data/gbc.txt\", header = TRUE)\n# Check the first few rows of the data frame\nhead(gbc)\n\n  id     time status hormone age meno size grade nodes prog estrg\n1  1 43.83607      1       1  38    1   18     3     5  141   105\n2  1 74.81967      0       1  38    1   18     3     5  141   105\n3  2 46.55738      1       1  52    1   20     1     1   78    14\n4  2 65.77049      0       1  52    1   20     1     1   78    14\n5  3 41.93443      1       1  47    1   30     2     1  422    89\n6  3 47.73770      2       1  47    1   30     2     1  422    89\n\n# The data frame 'gbc' contains:\n#  time:   time (months) to death, relapse, or censoring\n#  status: event indicator (1 = relapse, 2 = death, 0 = censoring)\n#  other covariates the same as in gbc_mor."
  },
  {
    "objectID": "sec1.html#analysis-goals",
    "href": "sec1.html#analysis-goals",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Analysis Goals",
    "text": "Analysis Goals\n\nDescriptive\n\nSummarize patient characteristics\nVisualize survival distributions\n\nInferential\n\nCompare survival curves (e.g., hormone therapy vs. no hormone therapy)\nAssess impact of covariates on survival (e.g., age, tumor size, etc.)\nModel competing risks (e.g., relapse vs. death)\n\nPredictive\n\nDevelop risk prediction models\nEvaluate model performance (e.g., concordance index, calibration)"
  },
  {
    "objectID": "sec1.html#survival-package-overview",
    "href": "sec1.html#survival-package-overview",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Survival Package Overview",
    "text": "Survival Package Overview\n\nKey Functions\n\nSurv(): Create survival object\nsurvfit(): Fit Kaplan-Meier survival curves\nsurvdiff(): Compare survival curves (log-rank test)\ncoxph(): Fit Cox proportional hazards regression models\nsurvreg(): Fit parametric survival regression models"
  },
  {
    "objectID": "sec1.html#kaplan-meier-survival-curves",
    "href": "sec1.html#kaplan-meier-survival-curves",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Kaplan-Meier Survival Curves",
    "text": "Kaplan-Meier Survival Curves\n\nCreate dataset for relapse-free survival\n\n\n# Sort by subject id, then time\no &lt;- order(gbc$id, gbc$time)\ngbc &lt;- gbc[o,]\n# Keep only first row per subject =&gt; first event\ndf &lt;- gbc[!duplicated(gbc$id), ]\n# Convert status &gt; 0 to 1 if it is either relapse or death\ndf$status &lt;- ifelse(df$status &gt; 0, 1, 0)\nhead(df)\n\n  id      time status hormone age meno size grade nodes prog estrg\n1  1 43.836066      1       1  38    1   18     3     5  141   105\n3  2 46.557377      1       1  52    1   20     1     1   78    14\n5  3 41.934426      1       1  47    1   30     2     1  422    89\n7  4  4.852459      0       1  40    1   24     1     3   25    11\n8  5 61.081967      0       2  64    2   19     2     1   19     9\n9  6 63.377049      0       2  49    2   56     1     3  356    64"
  },
  {
    "objectID": "sec1.html#kaplan-meier-curves",
    "href": "sec1.html#kaplan-meier-curves",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Kaplan-Meier Curves",
    "text": "Kaplan-Meier Curves\n\nFit Kaplan-Meier survival curves\n\n\nlibrary(survival) \n# Fit KM curves by hormone treatment group\nkm_fit &lt;- survfit(Surv(time, status) ~ hormone, data = df)\nkm_fit\n\nCall: survfit(formula = Surv(time, status) ~ hormone, data = df)\n\n            n events median 0.95LCL 0.95UCL\nhormone=1 440    205   50.1    42.5    59.5\nhormone=2 246     94   66.2    62.9      NA\n\n\n- **Summarize**\n\nsummary(km_fit, times = c(6, 12, 18, 24))\n\nCall: survfit(formula = Surv(time, status) ~ hormone, data = df)\n\n                hormone=1 \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n    6    419       9    0.979 0.00691        0.966        0.993\n   12    379      35    0.897 0.01476        0.868        0.926\n   18    329      43    0.794 0.01967        0.757        0.834\n   24    280      30    0.720 0.02203        0.678        0.764\n\n                hormone=2 \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n    6    236       4    0.983 0.00826        0.967        1.000\n   12    223       8    0.950 0.01418        0.922        0.978\n   18    198      21    0.859 0.02278        0.815        0.905\n   24    177      17    0.785 0.02701        0.733        0.839"
  },
  {
    "objectID": "sec1.html#kaplan-meier-curves-i",
    "href": "sec1.html#kaplan-meier-curves-i",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Kaplan-Meier Curves (I)",
    "text": "Kaplan-Meier Curves (I)\n\nFit Kaplan-Meier survival curves\n\n\nlibrary(survival) \n# Fit KM curves by hormone treatment group\nkm_fit &lt;- survfit(Surv(time, status) ~ hormone, data = df)\nkm_fit\n\nCall: survfit(formula = Surv(time, status) ~ hormone, data = df)\n\n            n events median 0.95LCL 0.95UCL\nhormone=1 440    205   50.1    42.5    59.5\nhormone=2 246     94   66.2    62.9      NA"
  },
  {
    "objectID": "sec1.html#kaplan-meier-curves-ii",
    "href": "sec1.html#kaplan-meier-curves-ii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Kaplan-Meier Curves (II)",
    "text": "Kaplan-Meier Curves (II)\n\nSummarize survival estimates at specified time points\n\nFor example, at 6, 12, 24, and 36 months\n\n\nsummary(km_fit, times = c(6, 12, 24, 36))\n\nCall: survfit(formula = Surv(time, status) ~ hormone, data = df)\n\n                hormone=1 \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n    6    419       9    0.979 0.00691        0.966        0.993\n   12    379      35    0.897 0.01476        0.868        0.926\n   24    280      73    0.720 0.02203        0.678        0.764\n   36    195      41    0.606 0.02475        0.559        0.656\n\n                hormone=2 \n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n    6    236       4    0.983 0.00826        0.967        1.000\n   12    223       8    0.950 0.01418        0.922        0.978\n   24    177      38    0.785 0.02701        0.733        0.839\n   36    136      16    0.708 0.03047        0.650        0.770"
  },
  {
    "objectID": "sec1.html#kaplan-meier-curves-iii",
    "href": "sec1.html#kaplan-meier-curves-iii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Kaplan-Meier Curves (III)",
    "text": "Kaplan-Meier Curves (III)\n\nPlot Kaplan-Meier survival curves by group\n\n\nplot(km_fit, ylim = c(0,1), xlab = \"Time (months)\", ylab = \"Relapse-free survival probability\",\n     col = c(\"red\", \"blue\"), conf.int = TRUE)\n# Add legend\nlegend(1, 0.2, col=c(\"red\", \"blue\"), lty = 1, \n       c(\"No hormone\", \"Hormone\")) # Legend text"
  },
  {
    "objectID": "sec1.html#log-rank-test",
    "href": "sec1.html#log-rank-test",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Log-Rank Test",
    "text": "Log-Rank Test\n\nCompare survival curves between groups\n\n\nlgr_obj &lt;- survdiff(Surv(time, status) ~ hormone, data = df)\nlgr_obj # Print log-rank test results\n\nCall:\nsurvdiff(formula = Surv(time, status) ~ hormone, data = df)\n\n            N Observed Expected (O-E)^2/E (O-E)^2/V\nhormone=1 440      205      180      3.37      8.56\nhormone=2 246       94      119      5.12      8.56\n\n Chisq= 8.6  on 1 degrees of freedom, p= 0.003 \n\nlgr_obj$pvalue # Extract p-value\n\n[1] 0.003427282\n\n\n\n\n\nExercise\n\n\nPerform a log-rank test on treatment stratified by patient menopausal status meno.\n\n\nSolution\nsurvdiff(Surv(time, status) ~ hormone + strata(meno), data = df)"
  },
  {
    "objectID": "sec1.html#key-takeaways",
    "href": "sec1.html#key-takeaways",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nSurvival analysis is essential for (often censored) time-to-event data\nKey estimands: survival function, hazard function, cumulative hazard\nStandard analysis tools\n\nKaplan-Meier curves (survfit())\nLog-rank test (survdiff())\nCox proportional hazards model (coxph())"
  },
  {
    "objectID": "sec1.html#cox-model---model-specification",
    "href": "sec1.html#cox-model---model-specification",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Model Specification",
    "text": "Cox Model - Model Specification\n\nCox proportional hazards model \\[\n\\lambda(t \\mid Z) = \\lambda_0(t) \\exp(\\beta_1 Z_1 + \\beta_2 Z_2 + \\ldots + \\beta_p Z_p)\n\\]\n\n\\(\\lambda_0(t)\\): baseline hazard function\n\\(Z=(Z_1,\\ldots, Z_p)^\\mathrm{T}\\): covariates (e.g., hormone therapy, age, tumor size)\n\\(\\beta=(\\beta_1，\\ldots，\\beta_p)^\\mathrm{T}\\): regression coefficients\n\\(\\exp(\\beta_j)\\): hazard ratio for covariate \\(Z_j\\)\n\nProportional hazards (PH) assumption \\[\n\\frac{\\lambda(t \\mid Z)}{\\lambda(t \\mid Z^*)} = \\exp\\{\\beta^\\mathrm{T}(Z - Z^*)\\}\n\\]\n\nHR constant over time, i.e., \\(\\beta(t) \\equiv \\beta\\) (for each covariate)"
  },
  {
    "objectID": "sec1.html#cox-model---model-fitting",
    "href": "sec1.html#cox-model---model-fitting",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Model Fitting",
    "text": "Cox Model - Model Fitting\n\nModel fitting: survival::coxph()\n\n\ncox_fit &lt;- coxph(Surv(time, status) ~ hormone + age + size + prog + estrg, data = df)\nsummary(cox_fit) # Print model summary\n\nCall:\ncoxph(formula = Surv(time, status) ~ hormone + age + size + prog + \n    estrg, data = df)\n\n  n= 686, number of events= 299 \n\n              coef  exp(coef)   se(coef)      z Pr(&gt;|z|)    \nhormone -0.3529035  0.7026450  0.1279482 -2.758  0.00581 ** \nage      0.0011593  1.0011600  0.0063647  0.182  0.85546    \nsize     0.0159456  1.0160734  0.0036144  4.412 1.03e-05 ***\nprog    -0.0027926  0.9972113  0.0005900 -4.733 2.21e-06 ***\nestrg    0.0001630  1.0001630  0.0004772  0.342  0.73265    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n        exp(coef) exp(-coef) lower .95 upper .95\nhormone    0.7026     1.4232    0.5468    0.9029\nage        1.0012     0.9988    0.9887    1.0137\nsize       1.0161     0.9842    1.0089    1.0233\nprog       0.9972     1.0028    0.9961    0.9984\nestrg      1.0002     0.9998    0.9992    1.0011\n\nConcordance= 0.64  (se = 0.016 )\nLikelihood ratio test= 58.91  on 5 df,   p=2e-11\nWald test            = 50.3  on 5 df,   p=1e-09\nScore (logrank) test = 47.24  on 5 df,   p=5e-09"
  },
  {
    "objectID": "sec1.html#cox-model---model-fitting-i",
    "href": "sec1.html#cox-model---model-fitting-i",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Model Fitting (I)",
    "text": "Cox Model - Model Fitting (I)\n\nModel fitting: survival::coxph()\n\n\ncox_fit &lt;- coxph(Surv(time, status) ~ hormone + meno + age + grade + size + prog + estrg, \n                 data = df)\nsummary(cox_fit) # Print model summary\n\nCall:\ncoxph(formula = Surv(time, status) ~ hormone + meno + age + grade + \n    size + prog + estrg, data = df)\n\n  n= 686, number of events= 299 \n\n              coef  exp(coef)   se(coef)      z Pr(&gt;|z|)    \nhormone -0.3422139  0.7101963  0.1290669 -2.651  0.00801 ** \nmeno     0.2765637  1.3185909  0.1837781  1.505  0.13236    \nage     -0.0087813  0.9912572  0.0093375 -0.940  0.34700    \ngrade    0.2785797  1.3212519  0.1051531  2.649  0.00807 ** \nsize     0.0152793  1.0153966  0.0036877  4.143 3.42e-05 ***\nprog    -0.0023307  0.9976720  0.0005803 -4.016 5.91e-05 ***\nestrg    0.0001678  1.0001679  0.0004669  0.359  0.71923    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n        exp(coef) exp(-coef) lower .95 upper .95\nhormone    0.7102     1.4081    0.5515    0.9146\nmeno       1.3186     0.7584    0.9198    1.8904\nage        0.9913     1.0088    0.9733    1.0096\ngrade      1.3213     0.7569    1.0752    1.6236\nsize       1.0154     0.9848    1.0081    1.0228\nprog       0.9977     1.0023    0.9965    0.9988\nestrg      1.0002     0.9998    0.9993    1.0011\n\nConcordance= 0.651  (se = 0.016 )\nLikelihood ratio test= 68.4  on 7 df,   p=3e-12\nWald test            = 61.93  on 7 df,   p=6e-11\nScore (logrank) test = 61.23  on 7 df,   p=9e-11"
  },
  {
    "objectID": "sec1.html#cox-model---model-fitting-ii",
    "href": "sec1.html#cox-model---model-fitting-ii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Model Fitting (II)",
    "text": "Cox Model - Model Fitting (II)\n\nExtracting \\(\\hat\\beta\\) and \\(\\hat{\\mathrm{var}}(\\hat\\beta)\\)\n\n\nbeta &lt;- cox_fit$coefficients # Estimated coefficients\nvbeta &lt;- vcov(cox_fit) # Estimated variance-covariance matrix\n# Extract regression table (as data frame)\ncoef(summary(cox_fit))\n\n                 coef exp(coef)     se(coef)          z     Pr(&gt;|z|)\nhormone -0.3422138547 0.7101963 0.1290669350 -2.6514448 8.014821e-03\nmeno     0.2765636858 1.3185909 0.1837780595  1.5048787 1.323553e-01\nage     -0.0087812621 0.9912572 0.0093375120 -0.9404285 3.469978e-01\ngrade    0.2785796730 1.3212519 0.1051531448  2.6492757 8.066449e-03\nsize     0.0152793172 1.0153966 0.0036877471  4.1432660 3.423945e-05\nprog    -0.0023307288 0.9976720 0.0005803186 -4.0162919 5.912102e-05\nestrg    0.0001678465 1.0001679 0.0004669057  0.3594870 7.192308e-01\n\n\n\nConclusion\n\nHormone therapy significantly reduces the risk of relapse or death by \\(1-0.710=29\\%\\) (\\(p\\) = 0.008)"
  },
  {
    "objectID": "sec1.html#cox-model---prediction",
    "href": "sec1.html#cox-model---prediction",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Prediction",
    "text": "Cox Model - Prediction\n\nPredicted survival function \\[\n\\hat S(t \\mid z) = \\exp\\left\\{- \\exp(\\hat\\beta^\\mathrm{T} z) \\hat\\Lambda_0(t)\\right\\}\n\\]\nPrepare new data for prediction\n\n\n# Create new data for prediction\n# specify all covariate values\nnew_data &lt;- data.frame(hormone = 1, meno = 1, \n                        age = 45, grade = 2, \n                        size = 20, prog = 100, \n                        estrg = 100)\nnew_data\n\n  hormone meno age grade size prog estrg\n1       1    1  45     2   20  100   100\n\n\n\n# Predict survival probabilities at 12 months\npredicted_survival &lt;- survfit(cox_fit, newdata = new_data[1, ], times = c(6, 12, 24, 36))\nsummary(predicted_survival)"
  },
  {
    "objectID": "sec1.html#cox-model---prediction-i",
    "href": "sec1.html#cox-model---prediction-i",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Prediction (I)",
    "text": "Cox Model - Prediction (I)\n\nPredicted survival function \\[\n\\hat S(t \\mid z) = \\exp\\left\\{- \\exp(\\hat\\beta^\\mathrm{T} z) \\hat\\Lambda_0(t)\\right\\}\n\\]\nPrepare new data for prediction\n\n\n# Create new data for prediction\n# specify all covariate values\nnew_data &lt;- data.frame(hormone = 1, meno = 1, \n                        age = 45, grade = 2, \n                        size = 20, prog = 100, \n                        estrg = 100)\nnew_data\n\n  hormone meno age grade size prog estrg\n1       1    1  45     2   20  100   100"
  },
  {
    "objectID": "sec1.html#cox-model---prediction-ii",
    "href": "sec1.html#cox-model---prediction-ii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Prediction (II)",
    "text": "Cox Model - Prediction (II)\n\nPredict survival probabilities at specified time points\n\n\n# Predict survival probabilities at 6, 12, 24, 26 months\npredicted_survival &lt;- survfit(cox_fit, newdata = new_data[1, ], times = c(6, 12, 24, 36))\nsummary(predicted_survival, times = c(6, 12, 24, 36))\n\nCall: survfit(formula = cox_fit, newdata = new_data[1, ], times = c(6, \n    12, 24, 36))\n\n time n.risk n.event survival std.err lower 95% CI upper 95% CI\n    6    655      13    0.985 0.00441        0.976        0.994\n   12    602      43    0.933 0.01059        0.913        0.954\n   24    457     111    0.786 0.02304        0.743        0.833\n   36    331      57    0.696 0.02925        0.641        0.755"
  },
  {
    "objectID": "sec1.html#cox-model---prediction-ii-1",
    "href": "sec1.html#cox-model---prediction-ii-1",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Prediction (II)",
    "text": "Cox Model - Prediction (II)\n\nPlot predicted survival function\n\n\n# Plot predicted survival function\nplot(predicted_survival, ylim = c(0, 1), xlab = \"Time (months)\", \n     ylab = \"Relapsep-free survival probability\", conf.int = TRUE)"
  },
  {
    "objectID": "sec1.html#cox-model---prediction-iii",
    "href": "sec1.html#cox-model---prediction-iii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Prediction (III)",
    "text": "Cox Model - Prediction (III)\n\nPlot predicted survival function\n\n\n# Plot predicted survival function\nplot(predicted_survival, ylim = c(0, 1), xlab = \"Time (months)\", \n     ylab = \"Relapsep-free survival probability\", conf.int = TRUE)"
  },
  {
    "objectID": "sec1.html#cox-model---model-checking-i",
    "href": "sec1.html#cox-model---model-checking-i",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Model Checking (I)",
    "text": "Cox Model - Model Checking (I)\n\nCheck PH assumptions\n\nGraphical: Plot scaled Schoenfeld residuals vs. time\nStatistical: Use cox.zph() to test PH assumption\n\n\n\nph_test &lt;- cox.zph(cox_fit)\nph_test # Print test results\n\n         chisq df      p\nhormone  0.272  1 0.6017\nmeno     5.514  1 0.0189\nage      9.430  1 0.0021\ngrade    8.490  1 0.0036\nsize     0.872  1 0.3505\nprog     4.881  1 0.0272\nestrg    5.403  1 0.0201\nGLOBAL  20.636  7 0.0043"
  },
  {
    "objectID": "sec1.html#cox-model---model-checking-ii",
    "href": "sec1.html#cox-model---model-checking-ii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Model Checking (II)",
    "text": "Cox Model - Model Checking (II)\n\nGraphical check of PH assumptions"
  },
  {
    "objectID": "sec1.html#cox-model---check-ph-assumptions-i",
    "href": "sec1.html#cox-model---check-ph-assumptions-i",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Check PH Assumptions (I)",
    "text": "Cox Model - Check PH Assumptions (I)\n\nSchoenfeld residuals\n\nDifference between observed and expected covariate values at each event time\nUse cox.zph() to test PH assumption\n\n\n\nph_test &lt;- cox.zph(cox_fit)\nph_test # Print test results\n\n         chisq df      p\nhormone  0.272  1 0.6017\nmeno     5.514  1 0.0189\nage      9.430  1 0.0021\ngrade    8.490  1 0.0036\nsize     0.872  1 0.3505\nprog     4.881  1 0.0272\nestrg    5.403  1 0.0201\nGLOBAL  20.636  7 0.0043"
  },
  {
    "objectID": "sec1.html#cox-model---check-ph-assumptions-ii",
    "href": "sec1.html#cox-model---check-ph-assumptions-ii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Check PH Assumptions (II)",
    "text": "Cox Model - Check PH Assumptions (II)\n\nGraphical check of PH assumptions\n\nPlot Schoenfeld residuals against time\n\n\n\npar(mfrow= c(2, 4)) # Set up 2x4 plotting area for 7 covariates\nplot(ph_test, se = TRUE, col = \"blue\", lwd = 2) # Plot Schoenfeld residuals"
  },
  {
    "objectID": "sec1.html#cox-model---check-covariate-forms",
    "href": "sec1.html#cox-model---check-covariate-forms",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Cox Model - Check Covariate Forms",
    "text": "Cox Model - Check Covariate Forms\n\nCheck linearity of covariate effects\n\nPlot martingale residuals against (quantitative) covariates\n\n\n\n# Extract martingale residuals \nmart_resid &lt;- residuals(cox_fit, type = 'martingale')\n\n\n\nPlotting\npar(mfrow= c(1, 4))  # Set up 1x4 plotting area for 4 covariates\n# Plot martingale residuals against age\nplot(df$age, mart_resid, xlab = \"Age\", ylab = \"Martingale Residuals\",\n     main = \"Age\")\n# Add smoothed line\nlines(lowess(df$age, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, col = \"red\", lty = 2) # Add horizontal line at 0\n\n# Repeat for other covariates\nplot(df$size, mart_resid, xlab = \"Tumor Size\", ylab = \"Martingale Residuals\",\n     main = \"Tumor Size\")\nlines(lowess(df$size, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, col = \"red\", lty = 2) # Add horizontal line at 0\nplot(df$prog, mart_resid, xlab = \"Progesterone Receptor\", ylab = \"Martingale Residuals\",\n     main = \"Progesterone Receptor\")\nlines(lowess(df$prog, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, col = \"red\", lty = 2) # Add horizontal line at 0\nplot(df$estrg, mart_resid, xlab = \"Estrogen Receptor\", ylab = \"Martingale Residuals\",\n     main = \"Estrogen Receptor\")\nlines(lowess(df$estrg, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, col = \"red\", lty = 2) # Add horizontal line at 0"
  },
  {
    "objectID": "sec1.html#coding-exercise",
    "href": "sec1.html#coding-exercise",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Coding Exercise",
    "text": "Coding Exercise\n\n\n\nExercise\n\n\nResidual analyses show that the proportional hazards assumption is violated for tumor grade, and that the effect of age is not linear.\nFit a different model to address these issues.\n\n\nSample solution\n# Dichotomize age at 40\ndf$age40 &lt;- ifelse(df$age &lt; 40, 0, 1)\n# Fit Cox model stratified by tumor grade and with binary age \ncox_fit2 &lt;- coxph(Surv(time, status) ~ hormone + meno + age40 + size + prog + estrg + \n                   strata(grade), data = df)\nsummary(cox_fit2) # Print model summary"
  },
  {
    "objectID": "sec1.html#open-questions",
    "href": "sec1.html#open-questions",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Open Questions",
    "text": "Open Questions\n\nEfficient/effective presentation of survival probabilities\n\nPoint estimates, confidence intervals\n\nCustomizable survival curves\n\nAdd at risk table below graph\n\nPresentation of regression results\n\nHazard ratios, confidence intervals, p-values\nVisualize regression results (e.g., forest plots)"
  },
  {
    "objectID": "tidy.html",
    "href": "tidy.html",
    "title": "Module 2. Data Manipulation with Tidyverse",
    "section": "",
    "text": "Section slides here. (To convert html to pdf, press E \\(\\to\\) Print \\(\\to\\) Destination: Save to pdf)\n\n\n\n\n\nShow the code\n# -------------------------------------------\n# Survival Analysis: Module 2 Code\n# -------------------------------------------\n\n# Load necessary package\nlibrary(survival)\n\n# ---------------------------\n# 1. Load Datasets\n# ---------------------------\n\n# Load mortality-only data\ngbc_mort &lt;- read.table(\"data/gbc_mort.txt\", header = TRUE)\nhead(gbc_mort)\n\n# Load mortality + relapse data\ngbc &lt;- read.table(\"data/gbc.txt\", header = TRUE)\nhead(gbc)\n\n# ---------------------------\n# 2. Prepare Dataset for Relapse-Free Survival\n# ---------------------------\n\n# Sort by subject ID and event time\ngbc &lt;- gbc[order(gbc$id, gbc$time), ]\n\n# Keep first event per subject\ndf &lt;- gbc[!duplicated(gbc$id), ]\n\n# Collapse relapse/death to single composite outcome\ndf$status &lt;- ifelse(df$status &gt; 0, 1, 0)\nhead(df)\n\n# ---------------------------\n# 3. Kaplan-Meier Estimation\n# ---------------------------\n\n# Fit Kaplan-Meier curves by hormone treatment\nkm_fit &lt;- survfit(Surv(time, status) ~ hormone, data = df)\n\n# Print KM summary\nsummary(km_fit, times = c(6, 12, 24, 36))\n\n# Plot KM curves with CI\nplot(km_fit, ylim = c(0, 1), xlab = \"Time (months)\",\n     ylab = \"Relapse-free survival probability\",\n     col = c(\"red\", \"blue\"), conf.int = TRUE)\nlegend(\"bottomleft\", col = c(\"red\", \"blue\"), lty = 1,\n       legend = c(\"No hormone\", \"Hormone\"))\n\n# ---------------------------\n# 4. Log-Rank Test\n# ---------------------------\n\n# Compare survival curves by treatment\nlgr_obj &lt;- survdiff(Surv(time, status) ~ hormone, data = df)\nlgr_obj\n\n# Stratified test by menopausal status\nsurvdiff(Surv(time, status) ~ hormone + strata(meno), data = df)\n\n# ---------------------------\n# 5. Cox Proportional Hazards Model\n# ---------------------------\n\n# Fit Cox PH model with multiple covariates\ncox_fit &lt;- coxph(Surv(time, status) ~ hormone + meno + age + grade +\n                   size + prog + estrg, data = df)\nsummary(cox_fit)\n\n# Extract estimates and covariance matrix\nbeta &lt;- cox_fit$coefficients\nvbeta &lt;- vcov(cox_fit)\ncoef(summary(cox_fit))\n\n# ---------------------------\n# 6. Survival Prediction\n# ---------------------------\n\n# Define new subject's covariates\nnew_data &lt;- data.frame(hormone = 1, meno = 1, \n                       age = 45, grade = 2,\n                       size = 20, prog = 100,\n                       estrg = 100)\n\n# Predict survival probabilities\npredicted_survival &lt;- survfit(cox_fit, newdata = new_data,\n                              times = c(6, 12, 24, 36))\nsummary(predicted_survival)\n\n# Plot predicted survival function\nplot(predicted_survival, ylim = c(0, 1), xlab = \"Time (months)\",\n     ylab = \"Predicted survival probability\", conf.int = TRUE)\n\n# ---------------------------\n# 7. Model Diagnostics\n# ---------------------------\n\n# Test proportional hazards assumption\nph_test &lt;- cox.zph(cox_fit)\nph_test\n\n# Plot Schoenfeld residuals\npar(mfrow = c(2, 4))  # 2 rows, 4 columns\nplot(ph_test, se = TRUE, col = \"blue\", lwd = 2)\n\n# ---------------------------\n# 8. Check Functional Form of Covariates\n# ---------------------------\n\n# Extract martingale residuals\nmart_resid &lt;- residuals(cox_fit, type = \"martingale\")\n\n# Plot residuals vs quantitative covariates\npar(mfrow = c(1, 4))  # 1 row, 4 plots\n\nplot(df$age, mart_resid, xlab = \"Age\", ylab = \"Martingale Residuals\",\n     main = \"Age\")\nlines(lowess(df$age, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$size, mart_resid, xlab = \"Tumor Size\", ylab = \"Martingale Residuals\",\n     main = \"Tumor Size\")\nlines(lowess(df$size, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$prog, mart_resid, xlab = \"Progesterone\", ylab = \"Martingale Residuals\",\n     main = \"Progesterone\")\nlines(lowess(df$prog, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$estrg, mart_resid, xlab = \"Estrogen\", ylab = \"Martingale Residuals\",\n     main = \"Estrogen\")\nlines(lowess(df$estrg, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\n# ---------------------------\n# 9. Addressing Violations\n# ---------------------------\n\n# Dichotomize age at 40, stratify on grade\ndf$age40 &lt;- ifelse(df$age &lt; 40, 0, 1)\n\ncox_fit2 &lt;- coxph(Surv(time, status) ~ hormone + meno + age40 +\n                    size + prog + estrg + strata(grade), data = df)\nsummary(cox_fit2)",
    "crumbs": [
      "Home",
      "Module 2. Data Manipulation with Tidyverse"
    ]
  },
  {
    "objectID": "tidy.html#slides",
    "href": "tidy.html#slides",
    "title": "Module 2. Data Manipulation with Tidyverse",
    "section": "",
    "text": "Section slides here. (To convert html to pdf, press E \\(\\to\\) Print \\(\\to\\) Destination: Save to pdf)",
    "crumbs": [
      "Home",
      "Module 2. Data Manipulation with Tidyverse"
    ]
  },
  {
    "objectID": "tidy.html#r-code",
    "href": "tidy.html#r-code",
    "title": "Module 2. Data Manipulation with Tidyverse",
    "section": "",
    "text": "Show the code\n# -------------------------------------------\n# Survival Analysis: Module 2 Code\n# -------------------------------------------\n\n# Load necessary package\nlibrary(survival)\n\n# ---------------------------\n# 1. Load Datasets\n# ---------------------------\n\n# Load mortality-only data\ngbc_mort &lt;- read.table(\"data/gbc_mort.txt\", header = TRUE)\nhead(gbc_mort)\n\n# Load mortality + relapse data\ngbc &lt;- read.table(\"data/gbc.txt\", header = TRUE)\nhead(gbc)\n\n# ---------------------------\n# 2. Prepare Dataset for Relapse-Free Survival\n# ---------------------------\n\n# Sort by subject ID and event time\ngbc &lt;- gbc[order(gbc$id, gbc$time), ]\n\n# Keep first event per subject\ndf &lt;- gbc[!duplicated(gbc$id), ]\n\n# Collapse relapse/death to single composite outcome\ndf$status &lt;- ifelse(df$status &gt; 0, 1, 0)\nhead(df)\n\n# ---------------------------\n# 3. Kaplan-Meier Estimation\n# ---------------------------\n\n# Fit Kaplan-Meier curves by hormone treatment\nkm_fit &lt;- survfit(Surv(time, status) ~ hormone, data = df)\n\n# Print KM summary\nsummary(km_fit, times = c(6, 12, 24, 36))\n\n# Plot KM curves with CI\nplot(km_fit, ylim = c(0, 1), xlab = \"Time (months)\",\n     ylab = \"Relapse-free survival probability\",\n     col = c(\"red\", \"blue\"), conf.int = TRUE)\nlegend(\"bottomleft\", col = c(\"red\", \"blue\"), lty = 1,\n       legend = c(\"No hormone\", \"Hormone\"))\n\n# ---------------------------\n# 4. Log-Rank Test\n# ---------------------------\n\n# Compare survival curves by treatment\nlgr_obj &lt;- survdiff(Surv(time, status) ~ hormone, data = df)\nlgr_obj\n\n# Stratified test by menopausal status\nsurvdiff(Surv(time, status) ~ hormone + strata(meno), data = df)\n\n# ---------------------------\n# 5. Cox Proportional Hazards Model\n# ---------------------------\n\n# Fit Cox PH model with multiple covariates\ncox_fit &lt;- coxph(Surv(time, status) ~ hormone + meno + age + grade +\n                   size + prog + estrg, data = df)\nsummary(cox_fit)\n\n# Extract estimates and covariance matrix\nbeta &lt;- cox_fit$coefficients\nvbeta &lt;- vcov(cox_fit)\ncoef(summary(cox_fit))\n\n# ---------------------------\n# 6. Survival Prediction\n# ---------------------------\n\n# Define new subject's covariates\nnew_data &lt;- data.frame(hormone = 1, meno = 1, \n                       age = 45, grade = 2,\n                       size = 20, prog = 100,\n                       estrg = 100)\n\n# Predict survival probabilities\npredicted_survival &lt;- survfit(cox_fit, newdata = new_data,\n                              times = c(6, 12, 24, 36))\nsummary(predicted_survival)\n\n# Plot predicted survival function\nplot(predicted_survival, ylim = c(0, 1), xlab = \"Time (months)\",\n     ylab = \"Predicted survival probability\", conf.int = TRUE)\n\n# ---------------------------\n# 7. Model Diagnostics\n# ---------------------------\n\n# Test proportional hazards assumption\nph_test &lt;- cox.zph(cox_fit)\nph_test\n\n# Plot Schoenfeld residuals\npar(mfrow = c(2, 4))  # 2 rows, 4 columns\nplot(ph_test, se = TRUE, col = \"blue\", lwd = 2)\n\n# ---------------------------\n# 8. Check Functional Form of Covariates\n# ---------------------------\n\n# Extract martingale residuals\nmart_resid &lt;- residuals(cox_fit, type = \"martingale\")\n\n# Plot residuals vs quantitative covariates\npar(mfrow = c(1, 4))  # 1 row, 4 plots\n\nplot(df$age, mart_resid, xlab = \"Age\", ylab = \"Martingale Residuals\",\n     main = \"Age\")\nlines(lowess(df$age, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$size, mart_resid, xlab = \"Tumor Size\", ylab = \"Martingale Residuals\",\n     main = \"Tumor Size\")\nlines(lowess(df$size, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$prog, mart_resid, xlab = \"Progesterone\", ylab = \"Martingale Residuals\",\n     main = \"Progesterone\")\nlines(lowess(df$prog, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\nplot(df$estrg, mart_resid, xlab = \"Estrogen\", ylab = \"Martingale Residuals\",\n     main = \"Estrogen\")\nlines(lowess(df$estrg, mart_resid), col = \"blue\", lwd = 2)\nabline(h = 0, lty = 2, col = \"red\")\n\n# ---------------------------\n# 9. Addressing Violations\n# ---------------------------\n\n# Dichotomize age at 40, stratify on grade\ndf$age40 &lt;- ifelse(df$age &lt; 40, 0, 1)\n\ncox_fit2 &lt;- coxph(Surv(time, status) ~ hormone + meno + age40 +\n                    size + prog + estrg + strata(grade), data = df)\nsummary(cox_fit2)",
    "crumbs": [
      "Home",
      "Module 2. Data Manipulation with Tidyverse"
    ]
  },
  {
    "objectID": "sec2.html#what-does-tidy-mean",
    "href": "sec2.html#what-does-tidy-mean",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "What Does “Tidy” Mean?",
    "text": "What Does “Tidy” Mean?\n\nA dataset is tidy if:\n\nEach variable is a column\nEach observation is a row\nEach type of observational unit is a table\n\n— Hadley Wickham, Tidy Data (2014)\nhttps://www.jstatsoft.org/article/view/v059i10"
  },
  {
    "objectID": "sec2.html#overview-of-the-tidyverse",
    "href": "sec2.html#overview-of-the-tidyverse",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Overview of the Tidyverse",
    "text": "Overview of the Tidyverse\n\nMotivation: tidy data for reproducible analysis\nKey packages\n\ndplyr (filtering, mutating, grouping, summarizing)\ntidyr (pivoting, nesting, reshaping)\ntibble (modern data frames)\nreadr / haven (importing .csv or .sas7bdat)\nlubridate (handling time variables)\nggplot2 (visualization)\n\n\n\n# Load core tidyverse packages\nlibrary(tidyverse)"
  },
  {
    "objectID": "sec2.html#the-tidyverse-ecosystem",
    "href": "sec2.html#the-tidyverse-ecosystem",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "The tidyverse Ecosystem",
    "text": "The tidyverse Ecosystem\n\nMotivation: tidy data for reproducible analysis\nKey packages\n\ndplyr (filtering, mutating, grouping, summarizing)\ntidyr (pivoting, nesting, reshaping)\ntibble (modern data frames)\nreadr / haven (importing .csv or .sas7bdat)\nlubridate (handling time variables)\nggplot2 (visualization)\n\n\n\n# Load core tidyverse packages\nlibrary(tidyverse)"
  },
  {
    "objectID": "sec2.html#why-tidy-data",
    "href": "sec2.html#why-tidy-data",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Why Tidy Data?",
    "text": "Why Tidy Data?\n\nTidy data principles\n\nEasy to reshape and transform\nCompatible with ggplot2, dplyr, tidyr, and modeling tools\nEncourages modular and reproducible code\n\nMessy data challenges:\n\nTime in rows, covariates in columns\nMultiple data types in one column\nSeparte randomization and event/censoring dates\nMissing/censored values inconsistently coded"
  },
  {
    "objectID": "sec2.html",
    "href": "sec2.html",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "",
    "text": "Motivation: tidy data for reproducible analysis\nKey packages\n\ndplyr (filtering, mutating, grouping, summarizing)\ntidyr (pivoting, nesting, reshaping)\ntibble (modern data frames)\nreadr / haven (importing .csv or .sas7bdat)\nlubridate (handling time variables)\nggplot2 (visualization)\n\n\n\n# Load core tidyverse packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\nA dataset is tidy if:\n\nEach variable is a column\nEach observation is a row\nEach type of observational unit is a table\n\n— Hadley Wickham, Tidy Data (2014)\nhttps://www.jstatsoft.org/article/view/v059i10\n\n\n\n\n\nTidy data principles\n\nEasy to reshape and transform\nCompatible with ggplot2, dplyr, tidyr, and modeling tools\nEncourages modular and reproducible code\n\nMessy data challenges:\n\nTime in rows, covariates in columns\nMultiple data types in one column\nMissing/censored values inconsistently coded"
  },
  {
    "objectID": "sec2.html#tidy-survival-data",
    "href": "sec2.html#tidy-survival-data",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Tidy Survival Data",
    "text": "Tidy Survival Data\n\nPossible pre-processing steps\n\nCalculate survival time from start to event/censoring\nCreating the \\((X, \\delta)\\) structure expected by Surv()\nReshaping data to long format in case of multiple events\n\nAn Example\n\n\n# Load GBC data\ngbc &lt;- read.table(\"data/gbc.txt\", header = TRUE)\nhead(gbc)\n\n  id     time status hormone age meno size grade nodes prog estrg\n1  1 43.83607      1       1  38    1   18     3     5  141   105\n2  1 74.81967      0       1  38    1   18     3     5  141   105\n3  2 46.55738      1       1  52    1   20     1     1   78    14\n4  2 65.77049      0       1  52    1   20     1     1   78    14\n5  3 41.93443      1       1  47    1   30     2     1  422    89\n6  3 47.73770      2       1  47    1   30     2     1  422    89"
  },
  {
    "objectID": "sec2.html#calculate-survival-time",
    "href": "sec2.html#calculate-survival-time",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Calculate Survival Time",
    "text": "Calculate Survival Time"
  },
  {
    "objectID": "sec2.html#calculate-survival-time-i",
    "href": "sec2.html#calculate-survival-time-i",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Calculate Survival Time (I)",
    "text": "Calculate Survival Time (I)\n\nTime from start to event/censoring (\\(X\\))\n\n\n\nAn example\n\n\n# Example: raw dates as character strings\ntrial_df &lt;- tibble(\n  id = 1:3,\n  rand_date = c(\"2022-01-01\", \"2022-01-15\", \"2022-01-20\"),\n  event_date = c(\"2022-04-01\", NA, \"2022-03-15\"),\n  censor_date = c(NA, \"2022-06-01\", NA)\n)"
  },
  {
    "objectID": "sec2.html#calendar",
    "href": "sec2.html#calendar",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Calendar",
    "text": "Calendar\n\nTime from start to event/censoring (\\(X\\))"
  },
  {
    "objectID": "sec2.html#calculate-survival-time-ii",
    "href": "sec2.html#calculate-survival-time-ii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Calculate Survival Time (II)",
    "text": "Calculate Survival Time (II)\n\nA data example\n\n\n# Example: raw dates as character strings\ntrial_df &lt;- tibble(\n  id = 1:3,\n  rand_date = c(\"2022-01-01\", \"2022-01-15\", \"2022-01-20\"),\n  end_date = c(\"2022-04-01\", \"2022-06-01\", \"2022-03-15\"),\n  status = c(\"dead\", \"censored\", \"dead\")\n)\ntrial_df"
  },
  {
    "objectID": "sec2.html#calendar-vs.-eventcensoring-times",
    "href": "sec2.html#calendar-vs.-eventcensoring-times",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Calendar vs. Event/Censoring Times",
    "text": "Calendar vs. Event/Censoring Times\n\nTime from start to event/censoring (\\(X\\))"
  },
  {
    "objectID": "sec2.html#parse-dates-and-calculate-times",
    "href": "sec2.html#parse-dates-and-calculate-times",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Parse Dates and Calculate Times",
    "text": "Parse Dates and Calculate Times\n\nA data example\n\n\n# Example: raw dates as character strings\ntrial_df &lt;- tibble(\n  id = 1:3,\n  rand_date = c(\"2022-01-01\", \"2022-01-15\", \"2022-01-20\"),\n  end_date = c(\"2022-04-01\", \"2022-06-01\", \"2022-03-15\"),\n  status = c(\"dead\", \"censored\", \"dead\")\n)\ntrial_df"
  },
  {
    "objectID": "sec2.html#calendar-vs.-event-times",
    "href": "sec2.html#calendar-vs.-event-times",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Calendar vs. Event Times",
    "text": "Calendar vs. Event Times\n\nTime from start to event/censoring (\\(X\\))"
  },
  {
    "objectID": "sec2.html#parse-dates-and-calculate-difference",
    "href": "sec2.html#parse-dates-and-calculate-difference",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Parse Dates and Calculate Difference",
    "text": "Parse Dates and Calculate Difference\n\nA data example\n\n\n# Example: raw dates as character strings\ntrial_df &lt;- tibble(\n  id = 1:3,\n  rand_date = c(\"2022-01-01\", \"2022-01-15\", \"2022-01-20\"),\n  end_date = c(\"2022-04-01\", \"2022-06-01\", \"2022-03-15\"),\n  status = c(\"dead\", \"censored\", \"dead\")\n)\ntrial_df\n\n# A tibble: 3 × 4\n     id rand_date  end_date   status  \n  &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;   \n1     1 2022-01-01 2022-04-01 dead    \n2     2 2022-01-15 2022-06-01 censored\n3     3 2022-01-20 2022-03-15 dead    \n\n\n\n# Parse dates and calculate time/status\ntrial_df &lt;- trial_df |&gt; \n  mutate(\n    rand_date = ymd(rand_date),\n    end_date = ymd(end_date),\n    censor_date = ymd(censor_date),\n    status = if_else(status == \"dead\", 1, 0)\n  )"
  },
  {
    "objectID": "sec2.html#basic-functionalities",
    "href": "sec2.html#basic-functionalities",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Basic Functionalities",
    "text": "Basic Functionalities\n\nData manipulation: using dplyr verbs\n\nmutate() to create new variables (e.g., age group, log-transformed labs)\nfilter() to subset by treatment or age\nselect() and rename() for variable formatting\narrange() to sort\ngroup_by() and summarize() for descriptive summaries by arm\n\nData reshaping: using tidyr functions\n\npivot_longer() to convert wide to long format\npivot_wider() to convert long to wide format\nnest() and unnest() for hierarchical data"
  },
  {
    "objectID": "sec2.html#a-simple-example",
    "href": "sec2.html#a-simple-example",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "A Simple Example",
    "text": "A Simple Example\n\nExample dataset\n\n\n# Simulated data example\ndf1 &lt;- tibble(\n  id = 1:6,\n  trt = c(\"A\", \"A\", \"B\", \"B\", \"A\", \"B\"),\n  age = c(65, 70, 58, 60, 64, 59),\n  time = c(5, 8, 12, 3, 2, 6),\n  status = c(1, 0, 1, 1, 0, 0)  # 1 = event, 0 = censored\n)\ndf1\n\n# A tibble: 6 × 5\n     id trt     age  time status\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1     1 A        65     5      1\n2     2 A        70     8      0\n3     3 B        58    12      1\n4     4 B        60     3      1\n5     5 A        64     2      0\n6     6 B        59     6      0"
  },
  {
    "objectID": "sec2.html#the-native-pipe-operator",
    "href": "sec2.html#the-native-pipe-operator",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "The Native Pipe Operator: |>",
    "text": "The Native Pipe Operator: |&gt;\n\nWhat is |&gt;\n\nIntroduced in R 4.1\nPasses the result of one expression into the first argument of the next\nSame idea as %&gt;%, but built into base R\n\nExample\n\n\ndf1 |&gt; \n  mutate(age_group = if_else(age &gt;= 65, \"older\", \"younger\")) %&gt;%\n  filter(trt == \"A\") %&gt;%\n  arrange(desc(time))\n\n# A tibble: 3 × 6\n     id trt     age  time status age_group\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    \n1     5 A        64     9      0 younger  \n2     2 A        70     8      0 older    \n3     1 A        65     5      1 older"
  },
  {
    "objectID": "sec2.html#native-pipe-operator",
    "href": "sec2.html#native-pipe-operator",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Native Pipe Operator: |>",
    "text": "Native Pipe Operator: |&gt;\n\nWhat is |&gt;\n\nIntroduced in R 4.1\nPasses the result of one expression into the first argument of the next\nSame idea as %&gt;%, but built into base R\n\nExample\n\n\ndf1 |&gt; # passes tibble data frame df1 to the next function\n  mutate(age_group = if_else(age &gt;= 65, \"older\", \"younger\")) |&gt; # create age group\n  filter(trt == \"A\") |&gt; # filter for treatment A\n  arrange(time) # sort by time\n\n# A tibble: 3 × 6\n     id trt     age  time status age_group\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    \n1     5 A        64     2      0 younger  \n2     1 A        65     5      1 older    \n3     2 A        70     8      0 older"
  },
  {
    "objectID": "sec2.html#summarizing-and-grouping",
    "href": "sec2.html#summarizing-and-grouping",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Summarizing and Grouping",
    "text": "Summarizing and Grouping\n\nSurvival-specific summaries (e.g., number of events)\n\ngroup_by() and summarize() for descriptive summaries by arm\n\n\n\ndf1 |&gt; \n  group_by(trt) |&gt; # group by treatment arm\n  summarize( # summarize each group\n    n = n(), # count number of rows (subjects)\n    events = sum(status), # sum of events (status = 1)\n    median_time = median(time) # median survival time\n  )\n\n# A tibble: 2 × 4\n  trt       n events median_time\n  &lt;chr&gt; &lt;int&gt;  &lt;dbl&gt;       &lt;dbl&gt;\n1 A         3      1           5\n2 B         3      2           6"
  },
  {
    "objectID": "sec2.html#dates-to-time-difference",
    "href": "sec2.html#dates-to-time-difference",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Dates to Time Difference",
    "text": "Dates to Time Difference\n\nA data example\n\n\n# Example: raw dates as character strings\ndf2 &lt;- tibble(\n  id = 1:3,\n  rand_date = c(\"2022-01-01\", \"2022-01-15\", \"2022-01-20\"),\n  end_date = c(\"2022-04-01\", \"2022-06-01\", \"2022-03-15\"),\n  status = c(\"dead\", \"censored\", \"dead\")\n)\ndf2\n\n# A tibble: 3 × 4\n     id rand_date  end_date   status  \n  &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;   \n1     1 2022-01-01 2022-04-01 dead    \n2     2 2022-01-15 2022-06-01 censored\n3     3 2022-01-20 2022-03-15 dead"
  },
  {
    "objectID": "sec2.html#parsing-dates-and-calculating-time",
    "href": "sec2.html#parsing-dates-and-calculating-time",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Parsing Dates and Calculating Time",
    "text": "Parsing Dates and Calculating Time\n\nUsing lubridate to parse dates\n\nymd() for “year-month-day” format\nmdy() for “month-day-year” format\n\n\n\n# Parse dates and calculate time/status\ndf2 |&gt; \n  mutate(\n    rand_date = ymd(rand_date), # convert character to Date\n    end_date = ymd(end_date), # convert character to Date\n    time = as.numeric(end_date - rand_date), # calculate time in days\n    status = if_else(status == \"dead\", 1, 0) # convert status to 1/0\n  )\n\n# A tibble: 3 × 5\n     id rand_date  end_date   status  time\n  &lt;int&gt; &lt;date&gt;     &lt;date&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 2022-01-01 2022-04-01      1    90\n2     2 2022-01-15 2022-06-01      0   137\n3     3 2022-01-20 2022-03-15      1    54"
  },
  {
    "objectID": "sec2.html#exercise-calculate-survival-time",
    "href": "sec2.html#exercise-calculate-survival-time",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Calculate Survival Time",
    "text": "Exercise: Calculate Survival Time\n\nCalculate time and status variables for df3:\n\n\n# create a df3 with dates in the form of month-day-year\ndf3 &lt;- tibble(\n  id = 1:3,\n  rand_date = c(\"Jan-01-2022\", \"01-15-2022\", \"01-20-2022\"),\n  end_date = c(\"04-01-2022\", \"Jun-01-2022\", \"03-15-2022\"),\n  status = c(\"dead\", \"censored\", \"dead\")\n)\ndf3\n\n# A tibble: 3 × 4\n     id rand_date   end_date    status  \n  &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;   \n1     1 Jan-01-2022 04-01-2022  dead    \n2     2 01-15-2022  Jun-01-2022 censored\n3     3 01-20-2022  03-15-2022  dead    \n\n\n\n\nSolution\ndf3 |&gt; \n  mutate(\n    rand_date = mdy(rand_date), # convert character to Date\n    end_date = mdy(end_date), # convert character to Date\n    time = as.numeric(end_date - rand_date), # calculate time in days\n    status = if_else(status == \"dead\", 1, 0) # convert status to 1/0\n  )"
  },
  {
    "objectID": "sec2.html#exercise-calculate-survival-time-i",
    "href": "sec2.html#exercise-calculate-survival-time-i",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Calculate Survival Time (I)",
    "text": "Exercise: Calculate Survival Time (I)\n\nCalculate time and status variables for df3:\n\n\n# create a df3 with dates in the form of month-day-year\ndf3 &lt;- tibble(\n  id = 1:3,\n  rand_date = c(\"Jan-01-2022\", \"01-15-2022\", \"01-20-2022\"),\n  end_date = c(\"04-01-2022\", \"Jun-01-2022\", \"03-15-2022\"),\n  status = c(\"dead\", \"censored\", \"dead\")\n)\ndf3\n\n# A tibble: 3 × 4\n     id rand_date   end_date    status  \n  &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;   \n1     1 Jan-01-2022 04-01-2022  dead    \n2     2 01-15-2022  Jun-01-2022 censored\n3     3 01-20-2022  03-15-2022  dead"
  },
  {
    "objectID": "sec2.html#exercise-calculate-survival-time-ii",
    "href": "sec2.html#exercise-calculate-survival-time-ii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Calculate Survival Time (II)",
    "text": "Exercise: Calculate Survival Time (II)\n\nHint: use mdy() to parse dates\n\n\n\nSolution\ndf3 |&gt; \n  mutate(\n    rand_date = mdy(rand_date), # convert character to Date\n    end_date = mdy(end_date), # convert character to Date\n    time = as.numeric(end_date - rand_date), # calculate time in days\n    status = if_else(status == \"dead\", 1, 0) # convert status to 1/0\n  )\n\n\n\nMore about manipulating dates\n\nlubridate official documentation\nR for Data Science: Dates and times"
  },
  {
    "objectID": "sec2.html#parsing-censored-observations",
    "href": "sec2.html#parsing-censored-observations",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Parsing Censored Observations",
    "text": "Parsing Censored Observations\n\nAlternative formats for censored times\n\n\"32+\", \"&gt;17\", etc\nparse_number() for get time; str_detect() for status\n\n\n\n# Example data: relapse times with \"+\" indicating censoring\nMP &lt;- c(10,  \"32+\", 23, \"25+\")\n# Convert to (time, status) format\ndf4 &lt;- tibble(\n  MP = MP,                               # Original data\n  time = parse_number(MP),               # Extract numeric part\n  status = 1 - str_detect(MP, \"\\\\+\")     # Censored if \"+\" detected\n)\ndf4\n\n# A tibble: 4 × 3\n  MP     time status\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 10       10      1\n2 32+      32      0\n3 23       23      1\n4 25+      25      0"
  },
  {
    "objectID": "sec2.html#exercise-parse-censored-times",
    "href": "sec2.html#exercise-parse-censored-times",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Parse Censored Times",
    "text": "Exercise: Parse Censored Times\n\nTask: Parse MP in df5 to create time and status\n\n\ndf5 &lt;- tibble(\n  MP = c(10, \"32+\", 23, \"&gt;25\")\n)\n\n\n\nSolution\ndf5 |&gt; \n  mutate(\n    time = parse_number(MP), # extract numeric part\n    status = 1 - str_detect(MP, \"\\\\+|&gt;\") # censored if \"+\" or (|) \"&gt;\" detected\n  )\n\n\n\nMore on string operation\n\nstringr official documentation\nR for Data Science: Strings"
  },
  {
    "objectID": "sec2.html#reshaping-data",
    "href": "sec2.html#reshaping-data",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Reshaping Data",
    "text": "Reshaping Data\n\nWhy reshape?\n\nMultiple events per subject\nWide format (multiple columns) \\(\\rightarrow\\) long format (one row per event)\n\n\n\n# Example: wide format with multiple events\ndf6 &lt;- tibble(\n  id = 1:3,\n  prog_time = c(10, 20, 30),\n  prog_status = c(1, 0, 1), # 1 = progression, 0 = censored\n  death_time = c(15, 20, 35),\n  death_status = c(0, 1, 1) # 1 = dead, 0 = censored\n)\n# 1: progression at 10, censored at 15\n# 2: dead at 20 without progression\n# 3: progression at 30, dead at 35\ndf6\n\n# A tibble: 3 × 5\n     id prog_time prog_status death_time death_status\n  &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n1     1        10           1         15            0\n2     2        20           0         20            1\n3     3        30           1         35            1"
  },
  {
    "objectID": "sec2.html#wide-to-long",
    "href": "sec2.html#wide-to-long",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Wide to Long",
    "text": "Wide to Long\n\nUsing pivot_longer()\n\nConvert wide format to long format\nSpecify names_to and values_to for new columns\n\n\n\ndf7 &lt;- df6 |&gt; \n  pivot_longer(\n    cols = c(prog_time, prog_status, death_time, death_status), # columns to reshape\n    names_to = c(\"event\", \".value\"), # .value keeps the variable name, event is the new column\n    names_pattern = \"(.*)_(.*)\" # split by underscore\n  ) \ndf7\n\n# A tibble: 6 × 4\n     id event  time status\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1     1 prog     10      1\n2     1 death    15      0\n3     2 prog     20      0\n4     2 death    20      1\n5     3 prog     30      1\n6     3 death    35      1"
  },
  {
    "objectID": "sec2.html#exercise-clean-up",
    "href": "sec2.html#exercise-clean-up",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Clean Up",
    "text": "Exercise: Clean Up\n\nTask: Clean up df7 to create a tidy survival dataset\n\nRemove rows with event = prog and status = 0 (non-terminal event)\nRecode status = 2 for death events\n\n\n\n\nSolution\ndf7 |&gt; \n  filter(\n    !(event == \"prog\" & status == 0) # remove non-occurrence of non-terminal events\n    ) |&gt; \n  mutate(\n    status = if_else(event == \"death\" & status == 1, 2, status) # recode death status\n  ) \n# # A tibble: 5 × 4\n#      id event  time status\n#   &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;\n# 1     1 prog     10      1\n# 2     1 death    15      0\n# 3     2 death    20      2\n# 4     3 prog     30      1\n# 5     3 death    35      2\n\n\n\nMore on reshaping data\n\ntidyr official documentation\nR for Data Science: Data tidying"
  },
  {
    "objectID": "sec2.html#swimmer-plot",
    "href": "sec2.html#swimmer-plot",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Swimmer Plot",
    "text": "Swimmer Plot\n\nWhat is a swimmer plot?\n\nVisualizes subject follow-up\nEach row represents a subject\nHorizontal lines show time to event/censoring"
  },
  {
    "objectID": "sec2.html#creating-a-swimmer-plot",
    "href": "sec2.html#creating-a-swimmer-plot",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Creating a Swimmer Plot",
    "text": "Creating a Swimmer Plot\n\nCode to reproduce previous plot\n\n\n# Specify the plot\nfig8 &lt;- df8 |&gt; \n  # Set-up: id on the y-axis, time on the x-axis\n  ggplot(aes(x = time, y = reorder(id, time))) + # reorder id by time\n  # Add geometric objects\n  geom_linerange(aes(xmin = 0, xmax = time)) + # horizontal lines from 0 to time\n  # Add points for events/censoring, distinguish by status\n  geom_point(aes(shape = factor(status)), size = 2.5, fill = \"white\") +\n  # Add vertical line at x = 0\n  geom_vline(xintercept = 0, linewidth = 1) +\n  theme_minimal() + # use minimal theme\n  # Format y axis\n  scale_y_discrete(name = \"Rats\") + # y-axis label\n  # Format x axis (label, breaks, no expansion on left, 0.05 expansion on right)\n  scale_x_continuous(name = \"Time (days)\", breaks = seq(0, 100, by = 20), \n                     expand = expansion(c(0, 0.05))) +\n  # Format point shape (pch = 23 for censoring, pch = 19 for event; label shape)\n  scale_shape_manual(values = c(23, 19), labels = c(\"Censoring\", \"Tumor development\")) +\n  # Further formatting using theme()\n  theme(\n    legend.position = \"top\", # place legend at the top\n    legend.title = element_blank(), # no legend title\n    axis.text.y = element_blank(), # no y-axis labels (otherwise id's will be printed)\n    axis.ticks.y = element_blank(), # no y-axis ticks\n    panel.grid.major.y = element_blank(), # no major grid lines on y-axis\n    legend.text = element_text(size = 11) # legend text size\n  )\n\n# Display the plot\nfig8"
  },
  {
    "objectID": "sec2.html#swimmer-plot-basics",
    "href": "sec2.html#swimmer-plot-basics",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Swimmer Plot Basics",
    "text": "Swimmer Plot Basics\n\nUsing ggplot2\n\ngeom_linerange() for horizontal lines\ngeom_point() for events\nfacet_wrap() for treatment arms (optional)\n\nA data example\n\n\n# Example data: rat survival times\ndf8 &lt;- tibble(\n  time = c(101, 55, 67, 23, 45, 98, 34, 77, 91, 104, 88),\n  status = c(0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1),\n  group = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"A\", \"B\", \"B\", \"A\", \"B\")\n) |&gt; \n  mutate(\n    id = row_number(), # create id column using row number\n    .before = 1 # place id before time\n  )"
  },
  {
    "objectID": "sec2.html#creating-swimmer-plot-with-ggplot2",
    "href": "sec2.html#creating-swimmer-plot-with-ggplot2",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Creating Swimmer Plot with ggplot2",
    "text": "Creating Swimmer Plot with ggplot2\n\n# Specify the plot\nfig8 &lt;- df8 |&gt; \n  # Set-up: id on the y-axis, time on the x-axis\n  ggplot(aes(x = time, y = reorder(id, time))) + # reorder id by time\n  # Add geometric objects\n  geom_linerange(aes(xmin = 0, xmax = time)) + # horizontal lines from 0 to time\n  # Add points for events/censoring, distinguish by status\n  geom_point(aes(shape = factor(status)), size = 2.5, fill = \"white\") +\n  # Add vertical line at x = 0\n  geom_vline(xintercept = 0, linewidth = 1) +\n  theme_minimal() + # use minimal theme\n  # Format y axis\n  scale_y_discrete(name = \"Rats\") + # y-axis label\n  # Format x axis (label, breaks, no expansion on left, 0.05 expansion on right)\n  scale_x_continuous(name = \"Time (days)\", breaks = seq(0, 100, by = 20), \n                     expand = expansion(c(0, 0.05))) +\n  # Format point shape (pch = 23 for censoring, pch = 19 for event; label shape)\n  scale_shape_manual(values = c(23, 19), labels = c(\"Censoring\", \"Tumor development\")) +\n  # Further formatting using theme()\n  theme(\n    legend.position = \"top\", # place legend at the top\n    legend.title = element_blank(), # no legend title\n    axis.text.y = element_blank(), # no y-axis labels (otherwise id's will be printed)\n    axis.ticks.y = element_blank(), # no y-axis ticks\n    panel.grid.major.y = element_blank(), # no major grid lines on y-axis\n    legend.text = element_text(size = 11) # legend text size\n  )\n\n# Display the plot\nfig8"
  },
  {
    "objectID": "sec2.html#exercise-swimmer-plot-by-group",
    "href": "sec2.html#exercise-swimmer-plot-by-group",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Swimmer Plot by Group",
    "text": "Exercise: Swimmer Plot by Group\n\nTask: Create a swimmer plot for df8 by group\n\nUse facet_wrap() to create separate panels for each group\nAdd a title “Swimmer Plot of Rat Survival Times”\n\n\n\n\n\nSolution\nfig8 + facet_wrap(~ group, scales = \"free\") + # facet by group (using different y-axis scales)\n  labs(title = \"Swimmer Plot of Rat Survival Times\") # add title"
  },
  {
    "objectID": "sec2.html#descriptive-statistics",
    "href": "sec2.html#descriptive-statistics",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Descriptive Statistics",
    "text": "Descriptive Statistics\n\nImportance of Table 1\n\nSummarizes baseline characteristics\nProvides context for formal analysis\n\nUsing gtsummary\n\ntbl_summary() for descriptive statistics\nadd_p() for p-values comparing groups (not recommended for randomized trials)\nadd_overall to add overall summary\nmodify_header() to customize table headers"
  },
  {
    "objectID": "sec2.html#a-simple-example-1",
    "href": "sec2.html#a-simple-example-1",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "A Simple Example",
    "text": "A Simple Example\n\nExample dataset\n\n\n# Example data: 10 subjects with treatment, age, and sex\ndf9 &lt;- tibble(\n  id = 1:10,\n  time = c(101, 55, 67, 23, 45, 98, 34, 77, 91, 104),\n  status = c(0, 1, 1, 0, 1, 0, 1, 0, 1, 0), # 0 = censored, 1 = event\n  trt = c(\"A\", \"A\", \"B\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\", \"B\"),\n  sex = c(\"M\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\", \"F\"),\n  age = c(65, 70, 58, 60, 64, 59, 66, 62, 68, 61)\n)\nhead(df9)\n\n# A tibble: 6 × 6\n     id  time status trt   sex     age\n  &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1   101      0 A     M        65\n2     2    55      1 A     F        70\n3     3    67      1 B     M        58\n4     4    23      0 B     F        60\n5     5    45      1 A     M        64\n6     6    98      0 B     F        59"
  },
  {
    "objectID": "sec2.html#creating-a-summary-table",
    "href": "sec2.html#creating-a-summary-table",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Creating a Summary Table",
    "text": "Creating a Summary Table\n\n\nlibrary(gtsummary) # load package\ndf9 |&gt; \n  tbl_summary(\n    by = trt,                            # summarize by treatment arm\n    include = c(sex, age, time, status), # include specific variables\n    label = list(                        # label variables\n      time = \"Follow-up time (months)\",\n      status = \"Events\"\n    )\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nA, N = 51\nB, N = 51\n\n\n\n\nsex\n\n\n\n\n\n\n    F\n1 (20%)\n4 (80%)\n\n\n    M\n4 (80%)\n1 (20%)\n\n\nage\n66.0 (65.0, 68.0)\n60.0 (59.0, 61.0)\n\n\nFollow-up time (months)\n55 (45, 91)\n77 (67, 98)\n\n\nEvents\n4 (80%)\n1 (20%)\n\n\n\n1 n (%); Median (IQR)"
  },
  {
    "objectID": "sec2.html#basic-syntax-of-tbl_summary",
    "href": "sec2.html#basic-syntax-of-tbl_summary",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Basic Syntax of tbl_summary()",
    "text": "Basic Syntax of tbl_summary()\n\nCommon arguments\n\nby = \"group\" to summarize by group\ninclude = c(\"variable1\", \"variable2\") to include specific variables\nlabel = list(variable = \"Label\") to customize variable labels\nstatistic = list(variable ~ \"statistic\") to specify statistics\n\nstatistic = list(all_continuous() ~ \"{mean} ({sd})\") for mean and SD\n\ndigits = list(variable ~ 2) to set decimal places"
  },
  {
    "objectID": "sec2.html#exercise-summarize-gbc-data",
    "href": "sec2.html#exercise-summarize-gbc-data",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Summarize GBC Data",
    "text": "Exercise: Summarize GBC Data\n\nTask: Create a summary table for the GBC mortality data\n\nSummarize by hormone therapy (hormone)\nInclude variables: time, status, age, meno, size, grade, nodes, prog, estrg\nLabel variables appropriately\nAdd overall summary column at the end\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nHormone, N = 2461\nNo Hormone, N = 4401\nOverall, N = 6861\n\n\n\n\nFollow-up time (months)\n48 (29, 61)\n41 (25, 57)\n44 (26, 60)\n\n\nDeath\n56 (23%)\n115 (26%)\n171 (25%)\n\n\nAge (years)\n58 (50, 63)\n50 (45, 59)\n53 (46, 61)\n\n\nMenopausal status\n187 (76%)\n209 (48%)\n396 (58%)\n\n\nTumor size (mm)\n25 (20, 35)\n25 (20, 35)\n25 (20, 35)\n\n\nTumor grade\n\n\n\n\n\n\n\n\n    1\n33 (13%)\n48 (11%)\n81 (12%)\n\n\n    2\n163 (66%)\n281 (64%)\n444 (65%)\n\n\n    3\n50 (20%)\n111 (25%)\n161 (23%)\n\n\nNumber of nodes\n3 (1, 7)\n3 (1, 7)\n3 (1, 7)\n\n\nProgesterone (fmol/mg)\n35 (7, 133)\n32 (7, 130)\n33 (7, 132)\n\n\nEstrogen (fmol/mg)\n46 (9, 183)\n32 (8, 92)\n36 (8, 114)\n\n\n\n1 Median (IQR); n (%)"
  },
  {
    "objectID": "sec2.html#exercise-summarize-gbc-data-i",
    "href": "sec2.html#exercise-summarize-gbc-data-i",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Summarize GBC Data (I)",
    "text": "Exercise: Summarize GBC Data (I)\n\nTask: Summarize the GBC mortality data (gbc_mort.txt) like below\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nHormone, N = 2461\nNo Hormone, N = 4401\nOverall, N = 6861\n\n\n\n\nFollow-up time (months)\n48 (29, 61)\n41 (25, 57)\n44 (26, 60)\n\n\nDeath\n56 (23%)\n115 (26%)\n171 (25%)\n\n\nAge (years)\n58 (50, 63)\n50 (45, 59)\n53 (46, 61)\n\n\nMenopausal status\n187 (76%)\n209 (48%)\n396 (58%)\n\n\nTumor size (mm)\n25 (20, 35)\n25 (20, 35)\n25 (20, 35)\n\n\nTumor grade\n\n\n\n\n\n\n\n\n    1\n33 (13%)\n48 (11%)\n81 (12%)\n\n\n    2\n163 (66%)\n281 (64%)\n444 (65%)\n\n\n    3\n50 (20%)\n111 (25%)\n161 (23%)\n\n\nNumber of nodes\n3 (1, 7)\n3 (1, 7)\n3 (1, 7)\n\n\nProgesterone (fmol/mg)\n35 (7, 133)\n32 (7, 130)\n33 (7, 132)\n\n\nEstrogen (fmol/mg)\n46 (9, 183)\n32 (8, 92)\n36 (8, 114)\n\n\n\n1 Median (IQR); n (%)"
  },
  {
    "objectID": "sec2.html#exercise-summarize-gbc-data-i-1",
    "href": "sec2.html#exercise-summarize-gbc-data-i-1",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Summarize GBC Data (I)",
    "text": "Exercise: Summarize GBC Data (I)\n\nPoints to note\n\nSummarize by hormone therapy (hormone)\nInclude variables: time, status, age, meno, size, grade, nodes, prog, estrg\nLabel variables appropriately\nAdd overall summary column at the end\n\n\n\n\nSolution\n# Load GBC mortality data (one record per patient)\ngbc_mort &lt;- read.table(\"data/gbc_mort.txt\")\n# Create the summary table\ngbc_mort |&gt; \n  mutate( # relabel hormone and menopausal status\n    hormone = if_else(hormone == 1, \"No Hormone\", \"Hormone\"),\n    meno = if_else(meno == 1, \"No\", \"Yes\") \n  ) |&gt; \n  tbl_summary( # create table\n    by = hormone, # summarize by hormone therapy\n    include = ! id, # exclude id from summary\n    # Label variables\n    label = list(\n      time = \"Follow-up time (months)\",\n      status = \"Death\",\n      hormone = \"Hormone therapy\",\n      age = \"Age (years)\",\n      meno = \"Menopausal status\",\n      size = \"Tumor size (mm)\",\n      grade = \"Tumor grade\",\n      nodes = \"Number of nodes\",\n      prog = \"Progesterone (fmol/mg)\",\n      estrg = \"Estrogen (fmol/mg)\"\n    ),\n  ) |&gt;\n  add_overall(last = TRUE) # Add overall column, at the end"
  },
  {
    "objectID": "sec2.html#exercise-summarize-gbc-data-iii",
    "href": "sec2.html#exercise-summarize-gbc-data-iii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Summarize GBC Data (III)",
    "text": "Exercise: Summarize GBC Data (III)\n\n\nSolution\n# Load GBC mortality data (one record per patient)\ngbc_mort &lt;- read.table(\"data/gbc_mort.txt\")\n# Create the summary table\ngbc_mort |&gt; \n  mutate( # relabel hormone and menopausal status\n    hormone = if_else(hormone == 1, \"No Hormone\", \"Hormone\"),\n    meno = if_else(meno == 1, \"No\", \"Yes\") \n  ) |&gt; \n  tbl_summary( # create table\n    by = hormone, # summarize by hormone therapy\n    include = ! id, # exclude id from summary\n    # Label variables\n    label = list(\n      time = \"Follow-up time (months)\",\n      status = \"Death\",\n      hormone = \"Hormone therapy\",\n      age = \"Age (years)\",\n      meno = \"Menopausal status\",\n      size = \"Tumor size (mm)\",\n      grade = \"Tumor grade\",\n      nodes = \"Number of nodes\",\n      prog = \"Progesterone (fmol/mg)\",\n      estrg = \"Estrogen (fmol/mg)\"\n    ),\n  ) |&gt;\n  add_overall(last = TRUE) # Add overall column, at the end"
  },
  {
    "objectID": "sec2.html#exercise-summarize-gbc-data-ii",
    "href": "sec2.html#exercise-summarize-gbc-data-ii",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Summarize GBC Data (II)",
    "text": "Exercise: Summarize GBC Data (II)\n\nPoints to note\n\nSummarize by hormone therapy (hormone)\nInclude variables: time, status, age, meno, size, grade, nodes, prog, estrg\nLabel variables appropriately\nAdd overall summary column at the end"
  },
  {
    "objectID": "sec2.html#exercise-summarize-gbc-data-iv",
    "href": "sec2.html#exercise-summarize-gbc-data-iv",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Summarize GBC Data (IV)",
    "text": "Exercise: Summarize GBC Data (IV)\n\nTask: summarize relapse and death data from gbc.txt\n\nHint: group_by(id) and summarize()\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nHormone, N = 2461\nNo Hormone, N = 4401\nOverall, N = 6861\n\n\n\n\nRelapse\n94 (38%)\n205 (47%)\n299 (44%)\n\n\nDeath\n56 (23%)\n115 (26%)\n171 (25%)\n\n\nComposite\n94 (38%)\n205 (47%)\n299 (44%)\n\n\nRelapse then death\n56 (23%)\n115 (26%)\n171 (25%)\n\n\n\n1 n (%)"
  },
  {
    "objectID": "sec2.html#exercise-summarize-gbc-data-v",
    "href": "sec2.html#exercise-summarize-gbc-data-v",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Exercise: Summarize GBC Data (V)",
    "text": "Exercise: Summarize GBC Data (V)\n\n\nSolution\n# Load GBC relapse and death data (long format)\ngbc &lt;- read.table(\"data/gbc.txt\")\n# Create the summary table\ngbc |&gt; \n  group_by(id, hormone) |&gt; \n  summarize(\n    rel = any(status == 1), # boolean for existence of a relapse (status=1)\n    death = any(status == 2), # boolean for existence of a death (status=2)\n    comp = rel | death,  # boolean for existence of either relapse or death\n    both = rel & death, # boolean for existence of both relapse and death\n  ) |&gt; \n  mutate(\n    hormone = if_else(hormone == 1, \"No Hormone\", \"Hormone\") # relabel hormone therapy\n  ) |&gt; \n  tbl_summary( # create table\n    by = hormone, # summarize by hormone therapy\n    include = c(rel, death, comp, both), # include specific variables\n    # Label variables\n    label = list(\n      rel = \"Relapse\",\n      death = \"Death\",\n      comp = \"Composite\",\n      both = \"Relapse then death\"\n    )\n  ) |&gt; \n  add_overall(last = TRUE) # Add overall column, at the end"
  },
  {
    "objectID": "sec2.html#key-takeaways",
    "href": "sec2.html#key-takeaways",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nTidyverse provides powerful tools for data manipulation and visualization\nTidy data principles simplify analysis and visualization\nSurvival data may require pre-processing steps (dplyr, tidyr,lubridate)\nSwimmer plots effectively visualize subject follow-up (ggplot2)\nDescriptive statistics can be easily summarized using gtsummary::tbl_summary()"
  },
  {
    "objectID": "sec2.html#next-steps",
    "href": "sec2.html#next-steps",
    "title": "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data",
    "section": "Next Steps",
    "text": "Next Steps\n\nFormat analysis results from the survival package:\n\nNonparametric estimates with survfit()\nRegression models with coxph()\n\nExplore advanced visualization techniques:\n\nKaplan–Meier curves with ggsurvfit or survminer\nLayered plots using ggplot2\nAnnotated plots for publications"
  }
]