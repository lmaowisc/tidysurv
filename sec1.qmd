---
title: "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data"
subtitle: "Module 1. Introduction"
css: style.css
# csl: apa.csl
author:
  name: Lu Mao
  affiliations: 
    - name: Department of Biostatistics & Medical Informatics
    - University of Wisconsin-Madison
    - Aug 3, 2025
  email: lmao@biostat.wisc.edu
format: 
  revealjs:
    theme: simple
    # auto-stretch: false
    # incremental: true
    toc: true
    toc-depth: 1
    # small: true
editor: visual
execute: 
  eval: false
  echo: true
  # cache: true
include-in-header:
  - text: |
      <style type="text/css">
      ul li ul li {
        font-size: 0.78em;
      }
      </style>
# bibliography: references.bib
# title-slide-attributes: 
#   data-background-image: jsm_logo.png
#   data-background-size: 20%
#   data-background-position: 2% 2%
---

# Basics of Survival Analysis

## Time-to-Event Data

-   A common type of outcome in medical and clinical studies
    -   **Starting point**: Randomization, diagnosis, enrollment, birth, etc.\
    -   **Endpoint (Event of interest)**: Death, disease onset, hospitalization, etc.
        -   **Engineering**: Failure times of machines or components (reliability)
        -   **Social sciences**: Time to job change, dropout, or event occurrence
-   **Right censoring**:
    -   Event not observed within the follow-up period
    -   Due to study ending, dropout, or loss to follow-up
    -   We only know:\
        $$
        T > C
        $$ where $T$ is event time and $C$ is censoring time

## Follow-up (Swimmer) Plot

-   A rat tumorigenicity study

![](images/rat_swim.png){fig-align="center" width="60%"}

## Basic Estimands

-   **Survival function**: $S(t) = \Pr(T > t)$
    -   Probability subject survives beyond time $t$
-   **Hazard function**:\
    $$
    \lambda(t) = \lim_{\Delta t \to 0} \frac{\Pr(t \leq T < t + \Delta t \mid T \geq t)}{\Delta t}
    $$
    -   Instantaneous risk of failure at time $t$
-   **Relationship** $$
    S(t) = \exp\left(-\int_0^t \lambda(u) \mathrm{d}u\right)
    $$
    -   **Cumulative hazard function**: $\Lambda(t) = \int_0^t \lambda(u) \mathrm{d}u$

## Observed (Censored) Data

-   **Notation**: $(X, \delta)$
    -   $X=\min(T, C)$: observation time (event or censoring)
    -   $\delta = I(T\leq C)$: event indicator (1 for event, 0 for censoring)
-   **Data format**

``` r
# time = X, status = delta (tidy format)
    id    time status
1     1     5     1
2     2     3     0
3     3     8     1
4     4     2     0
5     5     6     1
# Alternatively 
    id    time 
1     1     5   
2     2     3+  
3     3     8  
4     4     2+  
5     5     6 
```

# German Breast Cancer Study: A Working Example

## German Breast Cancer (GBC) Study

-   **Study Information**
    -   **Population**: 686 patients with node-positive breast cancer\
    -   **Objective**: Assess if hormone therapy tamoxifen + chemo reduces mortality/relapse\
    -   **Baseline info**: Age, tumor size, hormone levels, menopausal status, etc.\
    -   **Follow-up**: Median 44 months
        -   171 deaths $\to$ exact times known\
        -   515 censored $\to$ survival time $>$ censoring time
-   **Data sets**:
    -   Mortality data: [https://lmaowisc.github.io/tidysurv/data/gbc_mort.txt](https://lmaowisc.github.io/tidysurv/data/gbc_mort.txt){target="_blank"}
    -   Mortality + relapse: [https://lmaowisc.github.io/tidysurv/data/gbc.txt](https://lmaowisc.github.io/tidysurv/data/gbc.txt){target="_blank"}
    -   Download and save in a `data` folder under your root directory

## Data Format (I)

-   **Death only**

```{r}
#| eval: true
# Load mortality data
gbc_mort <- read.table("data/gbc_mort.txt", header = TRUE)
# Check the first few rows of the data frame
head(gbc_mort)
# The data frame 'gbc_mort' contains:
#  time:   time (months) to death or censoring
#  status: event indicator (1 = death, 0 = censoring)
# hormone: Hormone therapy (1 = no, 2 = yes); age: Age at diagnosis (years);
# meno: Menopausal status (1 = no, 2 = yes); size: Tumor size (mm); grade: Tumor grade (1–3);
# nodes: Number of positive lymph nodes; prog: Progesterone receptor level (fmol/mg); estrg:
# Estrogen receptor level (fmol/mg).
```

## Data Format (II)

-   **Mortality + relapse**

```{r}
#| eval: true
# Load mortality + relapse data
gbc <- read.table("data/gbc.txt", header = TRUE)
# Check the first few rows of the data frame
head(gbc)
# The data frame 'gbc' contains:
#  time:   time (months) to death, relapse, or censoring
#  status: event indicator (1 = relapse, 2 = death, 0 = censoring)
#  other covariates the same as in gbc_mor.
```

## Analysis Goals

-   **Descriptive**
    -   Summarize patient characteristics
    -   Visualize survival distributions
-   **Inferential**
    -   Compare survival curves (e.g., hormone therapy vs. no hormone therapy)
    -   Assess impact of covariates on survival (e.g., age, tumor size, etc.)
    -   Model competing risks (e.g., relapse vs. death)
-   **Predictive**
    -   Develop risk prediction models
    -   Evaluate model performance (e.g., concordance index, calibration)

# Standard Analysis with `survival` Package

## Survival Package Overview

-   **Key Functions**
    -   `Surv()`: Create survival object
    -   `survfit()`: Fit Kaplan-Meier survival curves
    -   `survdiff()`: Compare survival curves (log-rank test)
    -   `coxph()`: Fit Cox proportional hazards regression models
    -   `survreg()`: Fit parametric survival regression models

## Kaplan-Meier Survival Curves

-   **Create dataset for relapse-free survival**

```{r}
#| eval: true
# Sort by subject id, then time
o <- order(gbc$id, gbc$time)
gbc <- gbc[o,]
# Keep only first row per subject => first event
df <- gbc[!duplicated(gbc$id), ]
# Convert status > 0 to 1 if it is either relapse or death
df$status <- ifelse(df$status > 0, 1, 0)
head(df)
```

## Kaplan-Meier Curves (I)

-   **Fit Kaplan-Meier survival curves**

```{r}
#| eval: true
library(survival) 
# Fit KM curves by hormone treatment group
km_fit <- survfit(Surv(time, status) ~ hormone, data = df)
km_fit
```

## Kaplan-Meier Curves (II)

-   **Summarize survival estimates at specified time points**

    -   For example, at 6, 12, 24, and 36 months

    ```{r}
    #| eval: true
    summary(km_fit, times = c(6, 12, 24, 36))
    ```

## Kaplan-Meier Curves (III)

-   **Plot Kaplan-Meier survival curves by group**

```{r}
#| eval: true
plot(km_fit, ylim = c(0,1), xlab = "Time (months)", ylab = "Relapse-free survival probability",
     col = c("red", "blue"), conf.int = TRUE)
# Add legend
legend(1, 0.2, col=c("red", "blue"), lty = 1, 
       c("No hormone", "Hormone")) # Legend text
```

## Log-Rank Test

-   **Compare survival curves between groups**

```{r}
#| eval: true
lgr_obj <- survdiff(Surv(time, status) ~ hormone, data = df)
lgr_obj # Print log-rank test results
lgr_obj$pvalue # Extract p-value
```

::: {.callout-note appearance="minimal"}
## Exercise

Perform a log-rank test on treatment stratified by patient menopausal status `meno`.

```{r}
#| code-fold: true
#| code-summary: "Solution"
survdiff(Surv(time, status) ~ hormone + strata(meno), data = df)
```
:::

## Cox Model - Model Specification

-   **Cox proportional hazards model** $$
    \lambda(t \mid Z) = \lambda_0(t) \exp(\beta_1 Z_1 + \beta_2 Z_2 + \ldots + \beta_p Z_p)
    $$
    -   $\lambda_0(t)$: baseline hazard function
    -   $Z=(Z_1,\ldots, Z_p)^\mathrm{T}$: covariates (e.g., hormone therapy, age, tumor size)
    -   $\beta=(\beta_1，\ldots，\beta_p)^\mathrm{T}$: regression coefficients
    -   $\exp(\beta_j)$: hazard ratio for covariate $Z_j$
-   **Proportional hazards (PH) assumption** $$
    \frac{\lambda(t \mid Z)}{\lambda(t \mid Z^*)} = \exp\{\beta^\mathrm{T}(Z - Z^*)\}
    $$
    -   HR constant over time, i.e., $\beta(t) \equiv \beta$ (for each covariate)

## Cox Model - Model Fitting (I)

-   **Model fitting**: `survival::coxph()`

```{r}
#| eval: true

cox_fit <- coxph(Surv(time, status) ~ hormone + meno + age + grade + size + prog + estrg, 
                 data = df)
summary(cox_fit) # Print model summary
```

## Cox Model - Model Fitting (II)

-   Extracting $\hat\beta$ and $\hat{\mathrm{var}}(\hat\beta)$

```{r}
#| eval: true
beta <- cox_fit$coefficients # Estimated coefficients
vbeta <- vcov(cox_fit) # Estimated variance-covariance matrix
# Extract regression table (as data frame)
coef(summary(cox_fit))
```

-   **Conclusion**
    -   Hormone therapy significantly reduces the risk of relapse or death by $1-0.710=29\%$ ($p$ = 0.008)

## Cox Model - Prediction (I)

-   **Predicted survival function** $$
     \hat S(t \mid z) = \exp\left\{- \exp(\hat\beta^\mathrm{T} z) \hat\Lambda_0(t)\right\}
     $$

-   Prepare new data for prediction

```{r}
#| eval: true
# Create new data for prediction
# specify all covariate values
new_data <- data.frame(hormone = 1, meno = 1, 
                        age = 45, grade = 2, 
                        size = 20, prog = 100, 
                        estrg = 100)
new_data
```

## Cox Model - Prediction (II)

-   **Predict survival probabilities at specified time points**

```{r}
#| eval: true
# Predict survival probabilities at 6, 12, 24, 26 months
predicted_survival <- survfit(cox_fit, newdata = new_data[1, ], times = c(6, 12, 24, 36))
summary(predicted_survival, times = c(6, 12, 24, 36))
```

## Cox Model - Prediction (III)

-   **Plot predicted survival function**

```{r}
#| eval: true
# Plot predicted survival function
plot(predicted_survival, ylim = c(0, 1), xlab = "Time (months)", 
     ylab = "Relapsep-free survival probability", conf.int = TRUE)

```

## Cox Model - Check PH Assumptions (I)

-   **Schoenfeld residuals**
    -   Difference between observed and expected covariate values at each event time
    -   Use `cox.zph()` to test PH assumption

```{r}
#| eval: true
ph_test <- cox.zph(cox_fit)
ph_test # Print test results
```

## Cox Model - Check PH Assumptions (II)

-   **Graphical check of PH assumptions**
    -   Plot Schoenfeld residuals against time

```{r}
#| eval: true
par(mfrow= c(2, 4)) # Set up 2x4 plotting area for 7 covariates
plot(ph_test, se = TRUE, col = "blue", lwd = 2) # Plot Schoenfeld residuals
```

## Cox Model - Check Covariate Forms

-   **Check linearity of covariate effects**

    -   Plot martingale residuals against (quantitative) covariates

    ```{r}
    #| eval: true
    # Extract martingale residuals 
    mart_resid <- residuals(cox_fit, type = 'martingale')
    ```

    ```{r}
    #| eval: true
    #| code-fold: true
    #| code-summary: "Plotting"
    #| fig-width: 16
    #| fig-height: 4
    par(mfrow= c(1, 4))  # Set up 1x4 plotting area for 4 covariates
    # Plot martingale residuals against age
    plot(df$age, mart_resid, xlab = "Age", ylab = "Martingale Residuals",
         main = "Age")
    # Add smoothed line
    lines(lowess(df$age, mart_resid), col = "blue", lwd = 2)
    abline(h = 0, col = "red", lty = 2) # Add horizontal line at 0

    # Repeat for other covariates
    plot(df$size, mart_resid, xlab = "Tumor Size", ylab = "Martingale Residuals",
         main = "Tumor Size")
    lines(lowess(df$size, mart_resid), col = "blue", lwd = 2)
    abline(h = 0, col = "red", lty = 2) # Add horizontal line at 0
    plot(df$prog, mart_resid, xlab = "Progesterone Receptor", ylab = "Martingale Residuals",
         main = "Progesterone Receptor")
    lines(lowess(df$prog, mart_resid), col = "blue", lwd = 2)
    abline(h = 0, col = "red", lty = 2) # Add horizontal line at 0
    plot(df$estrg, mart_resid, xlab = "Estrogen Receptor", ylab = "Martingale Residuals",
         main = "Estrogen Receptor")
    lines(lowess(df$estrg, mart_resid), col = "blue", lwd = 2)
    abline(h = 0, col = "red", lty = 2) # Add horizontal line at 0
    ```

## Coding Exercise

::: {.callout-note appearance="minimal"}
## Exercise

Residual analyses show that the proportional hazards assumption is violated for tumor grade, and that the effect of age is not linear.

Fit a different model to address these issues.

```{r}
#| code-fold: true
#| code-summary: "Sample solution"
# Dichotomize age at 40
df$age40 <- ifelse(df$age < 40, 0, 1)
# Fit Cox model stratified by tumor grade and with binary age 
cox_fit2 <- coxph(Surv(time, status) ~ hormone + meno + age40 + size + prog + estrg + 
                   strata(grade), data = df)
summary(cox_fit2) # Print model summary
```
:::

# Summary

## Key Takeaways

-   Survival analysis is essential for (often censored) time-to-event data
-   Key estimands: survival function, hazard function, cumulative hazard
-   Standard analysis tools
    -   Kaplan-Meier curves (`survfit()`)
    -   Log-rank test (`survdiff()`)
    -   Cox proportional hazards model (`coxph()`)

## Open Questions

-   Efficient/effective presentation of survival probabilities
    -   Point estimates, confidence intervals
-   Customizable survival curves
    -   Add at risk table below graph
-   Presentation of regression results
    -   Hazard ratios, confidence intervals, p-values
    -   Visualize regression results (e.g., forest plots)
