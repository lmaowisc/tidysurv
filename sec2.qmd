---
title: "Tidy Survival Analysis: Applying R’s Tidyverse to Survival Data"
subtitle: "Module 2. Data Manipulation with Tidyverse"
css: style.css
# csl: apa.csl
author:
  name: Lu Mao
  affiliations: 
    - name: Department of Biostatistics & Medical Informatics
    - University of Wisconsin-Madison
    - Aug 2, 2025
  email: lmao@biostat.wisc.edu
format: 
  revealjs:
    theme: simple
    # auto-stretch: false
    # incremental: true
    toc: true
    toc-depth: 1
    # small: true
editor: visual
execute: 
  eval: false
  echo: true
  # cache: true
include-in-header:
  - text: |
      <style type="text/css">
      ul li ul li {
        font-size: 0.78em;
      }
      </style>
# bibliography: references.bib
# title-slide-attributes: 
#   data-background-image: jsm_logo.png
#   data-background-size: 20%
#   data-background-position: 2% 2%
---

# Overview of Tidyverse

## The `tidyverse` Ecosystem

-   **Motivation**: tidy data for reproducible analysis

-   **Key packages**

    -   `dplyr` (filtering, mutating, grouping, summarizing)
    -   `tidyr` (pivoting, nesting, reshaping)
    -   `tibble` (modern data frames)
    -   `readr` / `haven` (importing .csv or .sas7bdat)
    -   `lubridate` (handling time variables)
    -   `ggplot2` (visualization)

```{r}
#| eval: true
# Load core tidyverse packages
library(tidyverse)
```

## Basic Functionalities

-  **Data manipulation**: using `dplyr` verbs
    - `mutate()` to create new variables (e.g., age group, log-transformed labs)
    - `filter()` to subset by treatment or age
    - `select()` and `rename()` for variable formatting
    - `arrange()` to sort
    - `group_by()` and `summarize()` for descriptive summaries by arm

-  **Data reshaping**: using `tidyr` functions
    - `pivot_longer()` to convert wide to long format
    - `pivot_wider()` to convert long to wide format
    - `nest()` and `unnest()` for hierarchical data

## A Simple Example

- **Example dataset**

```{r}
#| eval: true
# Simulated data example
df1 <- tibble(
  id = 1:6,
  trt = c("A", "A", "B", "B", "A", "B"),
  age = c(65, 70, 58, 60, 64, 59),
  time = c(5, 8, 12, 3, 2, 6),
  status = c(1, 0, 1, 1, 0, 0)  # 1 = event, 0 = censored
)
df1
```

## Native Pipe Operator: `|>`

- **What is `|>`**
    - Introduced in **R 4.1**
    - Passes the result of one expression into the first argument of the next
    - Same idea as `%>%`, but **built into base R**

- **Example**

```{r}
#| eval: true
df1 |> # passes tibble data frame df1 to the next function
  mutate(age_group = if_else(age >= 65, "older", "younger")) |> # create age group
  filter(trt == "A") |> # filter for treatment A
  arrange(time) # sort by time
```

## Summarizing and Grouping


- Survival-specific summaries (e.g., number of events)
    - `group_by()` and `summarize()` for descriptive summaries by arm
```{r}
#| eval: true
df1 |> 
  group_by(trt) |> # group by treatment arm
  summarize( # summarize each group
    n = n(), # count number of rows (subjects)
    events = sum(status), # sum of events (status = 1)
    median_time = median(time) # median survival time
  )

```

  
## What Does “Tidy” Mean?

> A dataset is tidy if:
>
> -   Each **variable** is a column
> -   Each **observation** is a row
> -   Each **type of observational unit** is a table
>
> — Hadley Wickham, *Tidy Data* (2014)  
> [https://www.jstatsoft.org/article/view/v059i10](https://www.jstatsoft.org/article/view/v059i10)


## Why Tidy Data?

- **Tidy data principles**
    - Easy to reshape and transform
    - Compatible with `ggplot2`, `dplyr`, `tidyr`, and modeling tools
    - Encourages modular and reproducible code


- **Messy data challenges:**
    - Time in rows, covariates in columns
    - Multiple data types in one column
    - Separte randomization and event/censoring dates
    - Missing/censored values inconsistently coded

## Tidy Survival Data

- **Possible pre-processing steps**
    - Calculate survival time from start to event/censoring
    - Creating the $(X, \delta)$ structure expected by `Surv()`
    - Reshaping data to long format in case of multiple events

- **An Example**

```{r}
#| eval: true
# Load GBC data
gbc <- read.table("data/gbc.txt", header = TRUE)
head(gbc)

```

# Tidying Survival Data

## Calendar vs. Event Times

- **Time from start to event/censoring** ($X$)

![](images/cal_surv_time.png){fig-align="center" width="60%"}


## Dates to Time Difference

- **A data example**
```{r}
#| eval: true
# Example: raw dates as character strings
df2 <- tibble(
  id = 1:3,
  rand_date = c("2022-01-01", "2022-01-15", "2022-01-20"),
  end_date = c("2022-04-01", "2022-06-01", "2022-03-15"),
  status = c("dead", "censored", "dead")
)
df2
```

## Parsing Dates and Calculating Time

- **Using `lubridate` to parse dates**
    - `ymd()` for "year-month-day" format
    - `mdy()` for "month-day-year" format
```{r}
#| eval: true
# Parse dates and calculate time/status
df2 |> 
  mutate(
    rand_date = ymd(rand_date), # convert character to Date
    end_date = ymd(end_date), # convert character to Date
    time = as.numeric(end_date - rand_date), # calculate time in days
    status = if_else(status == "dead", 1, 0) # convert status to 1/0
  )
```


## Exercise: Calculate Survival Time (I)


- Calculate `time` and `status` variables for `df3`:
```{r}
#| eval: true
# create a df3 with dates in the form of month-day-year
df3 <- tibble(
  id = 1:3,
  rand_date = c("Jan-01-2022", "01-15-2022", "01-20-2022"),
  end_date = c("04-01-2022", "Jun-01-2022", "03-15-2022"),
  status = c("dead", "censored", "dead")
)
df3
```


## Exercise: Calculate Survival Time (II)

- **Hint**: use `mdy()` to parse dates

```{r}
#| code-fold: true
#| code-summary: Solution
df3 |> 
  mutate(
    rand_date = mdy(rand_date), # convert character to Date
    end_date = mdy(end_date), # convert character to Date
    time = as.numeric(end_date - rand_date), # calculate time in days
    status = if_else(status == "dead", 1, 0) # convert status to 1/0
  )

```

- More about manipulating dates 
    - [lubridate](https://lubridate.tidyverse.org/) official documentation
    - R for Data Science: [Dates and times](https://r4ds.hadley.nz/datetimes.html)

## Parsing Censored Observations

- **Alternative formats for censored times**
    - `"32+"`, `">17"`, etc
    - `parse_number()` for get `time`; `str_detect()` for `status`
```{r}
#| eval: true
# Example data: relapse times with "+" indicating censoring
MP <- c(10,  "32+", 23, "25+")
# Convert to (time, status) format
df4 <- tibble(
  MP = MP,                               # Original data
  time = parse_number(MP),               # Extract numeric part
  status = 1 - str_detect(MP, "\\+")     # Censored if "+" detected
)
df4
```

## Exercise: Parse Censored Times
- **Task**: Parse `MP` in `df5` to create `time` and `status`
```{r}
#| eval: true
df5 <- tibble(
  MP = c(10, "32+", 23, ">25")
)
```
```{r}
#| code-fold: true
#| code-summary: Solution
df5 |> 
  mutate(
    time = parse_number(MP), # extract numeric part
    status = 1 - str_detect(MP, "\\+|>") # censored if "+" or (|) ">" detected
  )
```

- More on string operation
    - [stringr](https://stringr.tidyverse.org/) official documentation
    - R for Data Science: [Strings](https://r4ds.hadley.nz/strings.html)

## Reshaping Data

- **Why reshape?**
    - Multiple events per subject
    - Wide format (multiple columns) $\rightarrow$ long format (one row per event)
    
```{r}
#| eval: true
# Example: wide format with multiple events
df6 <- tibble(
  id = 1:3,
  prog_time = c(10, 20, 30),
  prog_status = c(1, 0, 1), # 1 = progression, 0 = censored
  death_time = c(15, 20, 35),
  death_status = c(0, 1, 1) # 1 = dead, 0 = censored
)
# 1: progression at 10, censored at 15
# 2: dead at 20 without progression
# 3: progression at 30, dead at 35
df6
```

## Wide to Long

- **Using `pivot_longer()`**
    - Convert wide format to long format
    - Specify `names_to` and `values_to` for new columns

```{r}
#| eval: true

df7 <- df6 |> 
  pivot_longer(
    cols = c(prog_time, prog_status, death_time, death_status), # columns to reshape
    names_to = c("event", ".value"), # .value keeps the variable name, event is the new column
    names_pattern = "(.*)_(.*)" # split by underscore
  ) 
df7
```

## Exercise: Clean Up

- **Task**: Clean up `df7` to create a tidy survival dataset
    - Remove rows with `event = prog`  and `status = 0` (non-terminal event)
    - Recode `status = 2` for death events

```{r}
#| code-fold: true
#| code-summary: Solution
df7 |> 
  filter(
    !(event == "prog" & status == 0) # remove non-occurrence of non-terminal events
    ) |> 
  mutate(
    status = if_else(event == "death" & status == 1, 2, status) # recode death status
  ) 
# # A tibble: 5 × 4
#      id event  time status
#   <int> <chr> <dbl>  <dbl>
# 1     1 prog     10      1
# 2     1 death    15      0
# 3     2 death    20      2
# 4     3 prog     30      1
# 5     3 death    35      2
```

- More on reshaping data
    - [tidyr](https://tidyr.tidyverse.org/) official documentation
    - R for Data Science: [Data tidying](https://r4ds.hadley.nz/data-tidy.html)
    
# Visualizing Subject Follow-Up 

## Swimmer Plot

- **What is a swimmer plot?**
    - Visualizes subject follow-up
    - Each row represents a subject
    - Horizontal lines show time to event/censoring

![](images/rat_swim.png){fig-align="center" width="60%"}

## Swimmer Plot Basics

- **Using `ggplot2`**
    - `geom_linerange()` for horizontal lines
    - `geom_point()` for events
    - `facet_wrap()` for treatment arms (optional)

- **A data example**
```{r}
#| eval: true
# Example data: rat survival times
df8 <- tibble(
  time = c(101, 55, 67, 23, 45, 98, 34, 77, 91, 104, 88),
  status = c(0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1),
  group = c("A", "A", "A", "B", "B", "B", "A", "B", "B", "A", "B")
) |> 
  mutate(
    id = row_number(), # create id column using row number
    .before = 1 # place id before time
  )
```

## Creating a Swimmer Plot 

- Code to reproduce previous plot
```{r}
#| eval: true
# Specify the plot
fig8 <- df8 |> 
  # Set-up: id on the y-axis, time on the x-axis
  ggplot(aes(x = time, y = reorder(id, time))) + # reorder id by time
  # Add geometric objects
  geom_linerange(aes(xmin = 0, xmax = time)) + # horizontal lines from 0 to time
  # Add points for events/censoring, distinguish by status
  geom_point(aes(shape = factor(status)), size = 2.5, fill = "white") +
  # Add vertical line at x = 0
  geom_vline(xintercept = 0, linewidth = 1) +
  theme_minimal() + # use minimal theme
  # Format y axis
  scale_y_discrete(name = "Rats") + # y-axis label
  # Format x axis (label, breaks, no expansion on left, 0.05 expansion on right)
  scale_x_continuous(name = "Time (days)", breaks = seq(0, 100, by = 20), 
                     expand = expansion(c(0, 0.05))) +
  # Format point shape (pch = 23 for censoring, pch = 19 for event; label shape)
  scale_shape_manual(values = c(23, 19), labels = c("Censoring", "Tumor development")) +
  # Further formatting using theme()
  theme(
    legend.position = "top", # place legend at the top
    legend.title = element_blank(), # no legend title
    axis.text.y = element_blank(), # no y-axis labels (otherwise id's will be printed)
    axis.ticks.y = element_blank(), # no y-axis ticks
    panel.grid.major.y = element_blank(), # no major grid lines on y-axis
    legend.text = element_text(size = 11) # legend text size
  )

# Display the plot
fig8
```

## Exercise: Swimmer Plot by Group

- **Task**: Create a swimmer plot for `df8` by `group`
    - Use `facet_wrap()` to create separate panels for each group
    - Add a title "Swimmer Plot of Rat Survival Times"

```{r}
#| eval: true
#| echo: false
#| fig-width: 12
#| fig-height: 3
fig8 + facet_wrap(~ group, scales = "free") + # facet by group (using different y-axis scales)
  labs(title = "Swimmer Plot of Rat Survival Times") # add title
```

    
```{r}
#| code-fold: true
#| code-summary: Solution

fig8 + facet_wrap(~ group, scales = "free") + # facet by group (using different y-axis scales)
  labs(title = "Swimmer Plot of Rat Survival Times") # add title

```

# Creating “Table 1” 

## Descriptive Statistics

- **Importance of Table 1**
    - Summarizes baseline characteristics
    - Provides context for formal analysis
- **Using `gtsummary`**
    - `tbl_summary()` for descriptive statistics
    - `add_p()` for p-values comparing groups (not recommended for randomized trials)
    - `add_overall` to add overall summary
    - `modify_header()` to customize table headers

## Basic Syntax of `tbl_summary()`

- **Common arguments**
    - `by = "group"` to summarize by group
    - `include = c("variable1", "variable2")` to include specific variables
    - `label = list(variable = "Label")` to customize variable labels
    - `statistic = list(variable ~ "statistic")` to specify statistics
        - `statistic = list(all_continuous() ~ "{mean} ({sd})")` for mean and SD
    - `digits = list(variable ~ 2)` to set decimal places
    
## A Simple Example

- **Example dataset**
```{r}
#| eval: true

# Example data: 10 subjects with treatment, age, and sex
df9 <- tibble(
  id = 1:10,
  time = c(101, 55, 67, 23, 45, 98, 34, 77, 91, 104),
  status = c(0, 1, 1, 0, 1, 0, 1, 0, 1, 0), # 0 = censored, 1 = event
  trt = c("A", "A", "B", "B", "A", "B", "A", "B", "A", "B"),
  sex = c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F"),
  age = c(65, 70, 58, 60, 64, 59, 66, 62, 68, 61)
)
head(df9)
```


## Creating a Summary Table

<!-- - Sample code -->

```{r}
#| eval: true
library(gtsummary) # load package
df9 |> 
  tbl_summary(
    by = trt,                            # summarize by treatment arm
    include = c(sex, age, time, status), # include specific variables
    label = list(                        # label variables
      time = "Follow-up time (months)",
      status = "Events"
    )
  )
```

## Exercise: Summarize GBC Data (I)

- **Task**: Summarize the GBC mortality data (`gbc_mort.txt`) like below


```{r}
#| eval: true
#| echo: false

# Load GBC mortality data (one record per patient)
gbc_mort <- read.table("data/gbc_mort.txt")
# Create the summary table
gbc_mort |> 
  mutate( # relabel hormone and menopausal status
    hormone = if_else(hormone == 1, "No Hormone", "Hormone"),
    meno = if_else(meno == 1, "No", "Yes") 
  ) |> 
  tbl_summary( # create table
    by = hormone, # summarize by hormone therapy
    include = ! id, # exclude id from summary
    # Label variables
    label = list(
      time = "Follow-up time (months)",
      status = "Death",
      hormone = "Hormone therapy",
      age = "Age (years)",
      meno = "Menopausal status",
      size = "Tumor size (mm)",
      grade = "Tumor grade",
      nodes = "Number of nodes",
      prog = "Progesterone (fmol/mg)",
      estrg = "Estrogen (fmol/mg)"
    ),
  ) |>
  add_overall(last = TRUE) # Add overall column, at the end
```
    

## Exercise: Summarize GBC Data (II)

- **Points to note**
    - Summarize by hormone therapy (`hormone`)
    - Include variables: `time`, `status`, `age`, `meno`, `size`, `grade`, `nodes`, `prog`, `estrg`
    - Label variables appropriately
    - Add overall summary column at the end


## Exercise: Summarize GBC Data (III) 

```{r}
#| code-fold: true
#| code-summary: Solution

# Load GBC mortality data (one record per patient)
gbc_mort <- read.table("data/gbc_mort.txt")
# Create the summary table
gbc_mort |> 
  mutate( # relabel hormone and menopausal status
    hormone = if_else(hormone == 1, "No Hormone", "Hormone"),
    meno = if_else(meno == 1, "No", "Yes") 
  ) |> 
  tbl_summary( # create table
    by = hormone, # summarize by hormone therapy
    include = ! id, # exclude id from summary
    # Label variables
    label = list(
      time = "Follow-up time (months)",
      status = "Death",
      hormone = "Hormone therapy",
      age = "Age (years)",
      meno = "Menopausal status",
      size = "Tumor size (mm)",
      grade = "Tumor grade",
      nodes = "Number of nodes",
      prog = "Progesterone (fmol/mg)",
      estrg = "Estrogen (fmol/mg)"
    ),
  ) |>
  add_overall(last = TRUE) # Add overall column, at the end

```


## Exercise: Summarize GBC Data (IV)

- **Task**: summarize *relapse* and death data from `gbc.txt`
    - Hint: `group_by(id)` and `summarize()`

```{r}
#| eval: true
#| echo: false
# Load GBC relapse and death data (long format)
gbc <- read.table("data/gbc.txt")
# Create the summary table
gbc |> 
  group_by(id, hormone) |> 
  summarize(
    rel = any(status == 1), # boolean for existence of a relapse (status=1)
    death = any(status == 2), # boolean for existence of a death (status=2)
    comp = rel | death,  # boolean for existence of either relapse or death
    both = rel & death, # boolean for existence of both relapse and death
  ) |> 
  mutate(
    hormone = if_else(hormone == 1, "No Hormone", "Hormone") # relabel hormone therapy
  ) |> 
  tbl_summary( # create table
    by = hormone, # summarize by hormone therapy
    include = c(rel, death, comp, both), # include specific variables
    # Label variables
    label = list(
      rel = "Relapse",
      death = "Death",
      comp = "Composite",
      both = "Relapse then death"
    )
  ) |> 
  add_overall(last = TRUE) # Add overall column, at the end
  
```

## Exercise: Summarize GBC Data (V)

```{r}
#| code-fold: true
#| code-summary: Solution

# Load GBC relapse and death data (long format)
gbc <- read.table("data/gbc.txt")
# Create the summary table
gbc |> 
  group_by(id, hormone) |> 
  summarize(
    rel = any(status == 1), # boolean for existence of a relapse (status=1)
    death = any(status == 2), # boolean for existence of a death (status=2)
    comp = rel | death,  # boolean for existence of either relapse or death
    both = rel & death, # boolean for existence of both relapse and death
  ) |> 
  mutate(
    hormone = if_else(hormone == 1, "No Hormone", "Hormone") # relabel hormone therapy
  ) |> 
  tbl_summary( # create table
    by = hormone, # summarize by hormone therapy
    include = c(rel, death, comp, both), # include specific variables
    # Label variables
    label = list(
      rel = "Relapse",
      death = "Death",
      comp = "Composite",
      both = "Relapse then death"
    )
  ) |> 
  add_overall(last = TRUE) # Add overall column, at the end
  


```

# Summary

## Key Takeaways

- **Tidyverse** provides powerful tools for data manipulation and visualization
- **Tidy data** principles simplify analysis and visualization
- **Survival data** may require pre-processing steps (`dplyr`, `tidyr`,`lubridate`)
- **Swimmer plots** effectively visualize subject follow-up (`ggplot2`)
- **Descriptive statistics** can be easily summarized using `gtsummary::tbl_summary()`

## Next Steps

- Format analysis results from the `survival` package:
  - **Nonparametric estimates** with `survfit()`
  - **Regression models** with `coxph()`

- Explore advanced visualization techniques:
  - Kaplan–Meier curves with `ggsurvfit` or `survminer`
  - Layered plots using `ggplot2`
  - Annotated plots for publications


