---
title: "Tidy Survival Analysis: Applying Râ€™s Tidyverse to Survival Data"
subtitle: "Module 3. Nonparametric Survival Analysis"
css: style.css
# csl: apa.csl
author:
  name: Lu Mao
  affiliations: 
    - name: Department of Biostatistics & Medical Informatics
    - University of Wisconsin-Madison
    - Aug 2, 2025
  email: lmao@biostat.wisc.edu
format: 
  revealjs:
    theme: simple
    # auto-stretch: false
    # incremental: true
    toc: true
    toc-depth: 1
    # small: true
editor: visual
execute: 
  eval: false
  echo: true
  # cache: true
include-in-header:
  - text: |
      <style type="text/css">
      ul li ul li {
        font-size: 0.78em;
      }
      </style>
# bibliography: references.bib
# title-slide-attributes: 
#   data-background-image: jsm_logo.png
#   data-background-size: 20%
#   data-background-position: 2% 2%
---


# Tabulating Survival Estimates

## GBC: Relapse-Free Survival

- Use `dplyr` to get time-to-first event

```{r}
#| eval: true
library(tidyverse) # Load tidyverse packages
# Load mortality + relapse data
gbc <- read.table("data/gbc.txt", header = TRUE)
df <- gbc |>  # calculate time to first event (relapse or death)
  group_by(id) |> # group by id
  arrange(time) |> # sort rows by time
  slice(1) |>      # get the first row within each id
  ungroup()     # remove grouping
# Display the first few rows of the data
head(df) 
```

## Raw Output from `survfit()`

- **KM estimates by hormone therapy**

```{r}
#| eval: true
library(survival) # Load survival package
# Fit KM estimates by hormone group
km_fit <- survfit(Surv(time, status > 0) ~ hormone, data = df)
# summarize the KM fit object
summary(km_fit, times = c(6, 12, 24, 36))
```

## Extracting Survival Estimates

- **Elements in `survfit` object**
    - `time`: time points of the survival estimates
    - `surv`: survival probabilities at the time points
    - `lower, upper`: confidence intervals for the survival estimates
    - `strata`: stratification information (if applicable)

::: {.callout-note appearance="minimal"}
## Exercise
Create a table of survival estimates with 95\% confidence intervals at 6, 12, 24, and 36 months for each hormone therapy group using `dplyr` and `tibble`.
:::

## Tidying `survfit()` Output

- **Use `broom` package to tidy `survfit` objects**
    - `broom::tidy()` converts the `survfit` object into a tidy data frame
    - Useful for further analysis or visualization

```{r}
#| eval: true
library(broom) # Load broom package
tidy(km_fit) # Tidy the KM fit object
```



## Tabulation with `gtsummary` 

- **Main function: `tbl_survfit()`**
    - Takes on `survfit` object
    - Creates a table of survival estimates with confidence intervals
    - Automatically handles stratification and time points
```{r}
#| eval: true
library(gtsummary) # Load gtsummary package
# Create a table of survival estimates
km_fit |> tbl_survfit(                    # Pass `survfit` object
             label = "Hormone",           # Row label: "Hormone"
             times = c(6, 12, 24, 36),     # Time points for estimates
             label_header = "Month {time}" # Column label: "Month xx"
             ) 
```

## Grouping by Multiple Variables

- **Pass raw data to `tbl_survfit()`**

```{r}
#| eval: true
df |>                                       # Use raw data
  tbl_survfit(y = Surv(time, status),       # Survival object
              include = c(meno, grade),     # Include variables: menopause, grade
              label = list(meno = "Menopause", # Row labels
                          grade = "Tumor grade"),
              times = c(6, 12, 24, 36),     # Time points for estimates
              label_header = "Month {time}" # Column label: "Month xx"
             ) 
```



## Tabulating Quantile Estimates

- **Quantile estimates**: Median survival time, quartiles, etc.
    - Specify `probs` argument in `tbl_survfit()`

```{r}
#| eval: true
# Create a table of quantile estimates
km_fit |>                        # Pass `survfit` object
  tbl_survfit(
    label = "Hormone",           # Row label: "Hormone"
    probs = c(0.25, 0.5, 0.75),  # Quantiles: 25%, 50%, 75%
              label_header = "{100 * prob}% quantile") # Column label: "xx quantile"
```



## Exercise: Tabulating Quantiles

- **Create the following table**

```{r}
#| eval: true
#| echo: false
df |>                                       # Use raw data
  tbl_survfit(y = Surv(time, status),       # Survival object
              include = c(meno, grade),     # Include variables: menopause, grade
              label = list(meno = "Menopause", # Row labels
                          grade = "Tumor grade"),
              probs = c(0.25, 0.5, 0.75),   # Quantiles: 25%, 50%, 75%
              label_header = "{100 * prob}% quantile" # Column label: "xx quantile"
             )

```

```{r}
#| code-fold: true
#| code-summary: Solution
df |>                                       # Use raw data
  tbl_survfit(y = Surv(time, status > 0),   # Survival object
              include = c(meno, grade),     # Include variables: menopause, tumor grade
              label = list(meno = "Menopause", grade = "Tumor grade"), # Row labels
              probs = c(0.25, 0.5, 0.75),   # Quantiles: 25%, 50%, 75%
              label_header = "{100 * prob}% quantile") # Column label: "xx quantile"

```


## Customizing the Table

- **Customize table appearance**
    - `label_header`: change column names
    - `label`: change row labels
    - `statistic`: customize statistics displayed
        - `statistic = "{estimate} ({conf.low}, {conf.high})"` for confidence intervals

-   More about `gtsummary`
    -   [gtsummary](https://www.danieldsjoberg.com/gtsummary/) website
    -   [tbl_survfit documentation](https://www.danieldsjoberg.com/gtsummary/articles/tbl_survfit.html)


# Visualizing Kaplan-Meier Curves

## Base Plot

```{r}
#| code-fold: true
#| code-summary: Plot KM curves by hormone group
#| eval: true
plot(km_fit, ylim = c(0,1), xlab = "Time (months)", ylab = "Relapse-free survival probability",
     col = c("red", "blue"), conf.int = TRUE)
# Add legend
legend(1, 0.2, col=c("red", "blue"), lty = 1, c("No hormone", "Hormone")) # Legend text
# p-value for log-rank test
pval <- survdiff(Surv(time, status) ~ hormone, data = df)$pvalue # obtain p-value
text(70, 0.8, scales::pvalue(pval, add_p = TRUE)) # Annotate formatted p-value
```

## Enhanced Graphics with `ggsurvfit`

- **`ggsurvfit`**: Provides a `ggplot2` interface for survival curves
    - Takes on `survfit` object or raw data
    - `add_risktable()` adds a risk table below graph
    - Allows for more customization and aesthetics

```{r}
#| eval: true
library(ggsurvfit) # Load ggsurvfit package)
km_fit |> ggsurvfit()  # Pass `survfit` object
```

## Customization (I)

- **Customize the plot with `ggsurvfit`**
    - `add_risktable()`: Adds a risk table below the survival curve
    - `add_confidence_interval()`: Adds confidence intervals to the survival curve
    - `add_pvalue()`: Adds p-value for log-rank test
    - Other `ggplot2` functions to further customize the plot
        - `scale_x_continuous()`, `scale_y_continuous()`, `theme()`, etc.

## Customization (II)

- **Code**

```{r}
#| eval: true
# survfit2() fits better with `ggsurvfit`
km_fit2 <- survfit2(Surv(time, status > 0) ~ hormone,  
                    data = df |> # Relabel hormone variable
                      mutate(hormone = if_else(hormone == 1, "No hormone", "Hormone")) 
                      ) 
km_fig <- km_fit2 |>     # Plot KM curves with customization
  ggsurvfit() +          # Pass `survfit2` object                       
  add_risktable() +      # Add risk table below the graph
  add_confidence_interval() +   # Add confidence intervals                
  add_pvalue(caption = "Log-rank {p.value}") +  # Add p-value for log-rank test
  scale_x_continuous("Time (months)", breaks = seq(0, 84, 12)) + # x-axis format
  scale_y_continuous("Relapse-free survival probability", limits = c(0, 1)) + # y-axis format
  theme_classic() + # Use classic theme for this ggplot
  theme(legend.position = "top") # Position legend at the top

ggsave("images/km_fig.png", km_fig, width = 7.5, height = 5) # Save the plot
```


## Customization (III)

- **Result**

![](images/km_fig.png){fig-align="center" width="100%"}


## Risk Table Exercise

- **Task**: Display only numbers at risk in the risk table
    - Hint: Add `risktable_stats = "n.risk"` argument in `add_risktable()`


```{r}
#| code-fold: true
#| code-summary: Solution
km_fit2 |>     # Plot KM curves with customization
  ggsurvfit() +          # Pass `survfit2` object                       
  add_risktable(         # Add risk table below the graph
    risktable_stats = "n.risk" # Show only number at risk
  ) +      
  add_confidence_interval() +   # Add confidence intervals                
  add_pvalue(caption = "Log-rank {p.value}") +  # Add p-value for log-rank test
  scale_x_continuous("Time (months)", breaks = seq(0, 84, 12)) + # x-axis format
  scale_y_continuous("Relapse-free survival probability", limits = c(0, 1)) + # y-axis format
  theme_classic() + # Use classic theme for this ggplot
  theme(legend.position = "top") # Position legend at the top
```

## Add Quantiles (I)

- **Add quantile estimates to the plot**
    - Use `add_quantile()` to add median survival time and other quantiles
    - Specify `y_value` or `x_value` arguments for desired quantiles or time points

```{r}
km_fig + add_quantile(
    y_value = 0.5, # Add median survival time
  )
```

```{r}
#| echo: false
km_med_fig <- km_fig + add_quantile(
    y_value = 0.5 # Add median survival time
  )

ggsave("images/km_med_fig.png", km_med_fig, width = 7.5, height = 5) # Save the plot
```

## Add Quantiles (II)

- **Result**

![](images/km_med_fig.png){fig-align="center" width="100%"}


## Exercise: Add Time Points

- **Task**: Add reference lines at 72 months
    - Use `add_quantile()` with `x_value` argument
```{r}
#| echo: false
km_time_fig <- km_fig + add_quantile(
   x_value = 72 # Add 72-month reference lines
  )
ggsave("images/km_time_fig.png", km_time_fig, width = 7.5, height = 5) # Save the plot
```

```{r}
#| code-fold: true
#| code-summary: Solution
km_fig + add_quantile(
   x_value = 72 # Add 72-month reference lines
  )
```

## Further Customizations

- **Customize the plot further**
    -  `add_risktable_strata_symbol(...)`: Use symbols for strata in the risk table
        - `symbol = NULL`, `size = 15`, `face = "bold"`, etc.
    - `add_censor_mark(...)`ï¼š Add censor marks to the survival curve
        - `size = 3`, `shape = 3`, `color = "black"`, etc.

- More about `ggsurvfit`
    - [ggsurvfit](https://www.danieldsjoberg.com/ggsurvfit/) website
    - [Webinar](https://www.danieldsjoberg.com/ggsurvfit-rmed-webinar-2024/) by Daniel D. Sjoberg


# Tidy Analysis of Competing Risks

## Competing Risks Overview

- **Competing risks**
    - Subject may experience at most one of multiple distinct types of event
    - E.g., death from different causes; relapse vs. death (before relapse) in cancer studies

- **Notation**: $(T, \Delta)$
    - $T$: time to event
    - $\Delta$: event type indicator (e.g., 1 for relapse, 2 for death)

- **Quantity of interest**
    - cumulative incidence function (CIF), or sub-distribution
    $$
    F_k(t) = P(T \leq t, \Delta = k)
    $$
        - Cumulative probability of event type $k$ by time $t$



# Summary

## Key Takeaways


