---
title: "Tidy Survival Analysis: Applying Râ€™s Tidyverse to Survival Data"
subtitle: "Module 3. Nonparametric Survival Analysis"
css: style.css
# csl: apa.csl
author:
  name: Lu Mao
  affiliations: 
    - name: Department of Biostatistics & Medical Informatics
    - University of Wisconsin-Madison
    - Aug 3, 2025
  email: lmao@biostat.wisc.edu
format: 
  revealjs:
    theme: simple
    # auto-stretch: false
    # incremental: true
    toc: true
    toc-depth: 1
    # small: true
editor: visual
execute: 
  eval: false
  echo: true
  # cache: true
include-in-header:
  - text: |
      <style type="text/css">
      ul li ul li {
        font-size: 0.78em;
      }
      </style>
# bibliography: references.bib
# title-slide-attributes: 
#   data-background-image: jsm_logo.png
#   data-background-size: 20%
#   data-background-position: 2% 2%
---

# Tabulating Survival Estimates

## GBC: Relapse-Free Survival

-   Use `dplyr` to get time-to-first event

```{r}
#| eval: true
library(tidyverse) # Load tidyverse packages
# Load mortality + relapse data
gbc <- read.table("data/gbc.txt", header = TRUE)
df <- gbc |>  # calculate time to first event (relapse or death)
  group_by(id) |> # group by id
  arrange(time) |> # sort rows by time
  slice(1) |>      # get the first row within each id
  ungroup()     # remove grouping
# Display the first few rows of the data
head(df) 
```

## Raw Output from `survfit()`

-   **KM estimates by hormone therapy**

```{r}
#| eval: true
library(survival) # Load survival package
# Fit KM estimates by hormone group
km_fit <- survfit(Surv(time, status > 0) ~ hormone, data = df)
# summarize the KM fit object
summary(km_fit, times = c(6, 12, 24, 36))
```

## Extracting Survival Estimates

-   **Elements in `survfit` object**
    -   `time`: time points of the survival estimates
    -   `surv`: survival probabilities at the time points
    -   `lower, upper`: confidence intervals for the survival estimates
    -   `strata`: stratification information (if applicable)

::: {.callout-note appearance="minimal"}
## Exercise

Create a table of survival estimates with 95% confidence intervals at 6, 12, 24, and 36 months for each hormone therapy group using `dplyr` and `tibble`.
:::

## Tidying `survfit()` Output

-   **Use `broom` package to tidy `survfit` objects**
    -   `broom::tidy()` converts the `survfit` object into a tidy data frame
    -   Useful for further analysis or visualization

```{r}
#| eval: true
library(broom) # Load broom package
tidy(km_fit) # Tidy the KM fit object
```

## Tabulation with `gtsummary`

-   **Main function: `tbl_survfit()`**

    -   Takes on `survfit` object
    -   Creates a table of survival estimates with confidence intervals
    -   Automatically handles stratification and time points

    ```{r}
    #| eval: true
    library(gtsummary) # Load gtsummary package
    # Create a table of survival estimates
    km_fit |> tbl_survfit(                    # Pass `survfit` object
                 label = "Hormone",           # Row label: "Hormone"
                 times = c(6, 12, 24, 36),     # Time points for estimates
                 label_header = "Month {time}" # Column label: "Month xx"
                 ) 
    ```

## Grouping by Multiple Variables

-   **Pass raw data to `tbl_survfit()`**

```{r}
#| eval: true
df |>                                       # Use raw data
  tbl_survfit(y = Surv(time, status),       # Survival object
              include = c(meno, grade),     # Include variables: menopause, grade
              label = list(meno = "Menopause", # Row labels
                          grade = "Tumor grade"),
              times = c(6, 12, 24, 36),     # Time points for estimates
              label_header = "Month {time}" # Column label: "Month xx"
             ) 
```

## Tabulating Quantile Estimates

-   **Quantile estimates**: Median survival time, quartiles, etc.
    -   Specify `probs` argument in `tbl_survfit()`

```{r}
#| eval: true
# Create a table of quantile estimates
km_fit |>                        # Pass `survfit` object
  tbl_survfit(
    label = "Hormone",           # Row label: "Hormone"
    probs = c(0.25, 0.5, 0.75),  # Quantiles: 25%, 50%, 75%
              label_header = "{100 * prob}% quantile") # Column label: "xx quantile"
```

## Exercise: Tabulating Quantiles

-   **Create the following table**

```{r}
#| eval: true
#| echo: false
df |>                                       # Use raw data
  tbl_survfit(y = Surv(time, status),       # Survival object
              include = c(meno, grade),     # Include variables: menopause, grade
              label = list(meno = "Menopause", # Row labels
                          grade = "Tumor grade"),
              probs = c(0.25, 0.5, 0.75),   # Quantiles: 25%, 50%, 75%
              label_header = "{100 * prob}% quantile" # Column label: "xx quantile"
             )

```

```{r}
#| code-fold: true
#| code-summary: Solution
df |>                                       # Use raw data
  tbl_survfit(y = Surv(time, status > 0),   # Survival object
              include = c(meno, grade),     # Include variables: menopause, tumor grade
              label = list(meno = "Menopause", grade = "Tumor grade"), # Row labels
              probs = c(0.25, 0.5, 0.75),   # Quantiles: 25%, 50%, 75%
              label_header = "{100 * prob}% quantile") # Column label: "xx quantile"

```

## Customizing the Table

-   **Customize table appearance**
    -   `label_header`: change column names
    -   `label`: change row labels
    -   `statistic`: customize statistics displayed
        -   `statistic = "{estimate} ({conf.low}, {conf.high})"` for confidence intervals
-   More about `gtsummary`
    -   [gtsummary](https://www.danieldsjoberg.com/gtsummary/) website
    -   [tbl_survfit documentation](https://www.danieldsjoberg.com/gtsummary/articles/tbl_survfit.html)

# Visualizing Kaplan-Meier Curves

## Base Plot

```{r}
#| code-fold: true
#| code-summary: Plot KM curves by hormone group
#| eval: true
plot(km_fit, ylim = c(0,1), xlab = "Time (months)", ylab = "Relapse-free survival probability",
     col = c("red", "blue"), conf.int = TRUE)
# Add legend
legend(1, 0.2, col=c("red", "blue"), lty = 1, c("No hormone", "Hormone")) # Legend text
# p-value for log-rank test
pval <- survdiff(Surv(time, status) ~ hormone, data = df)$pvalue # obtain p-value
text(70, 0.8, scales::pvalue(pval, add_p = TRUE)) # Annotate formatted p-value
```

## Enhanced Graphics with `ggsurvfit`

-   **`ggsurvfit`**: Provides a `ggplot2` interface for survival curves
    -   Takes on `survfit` object or raw data
    -   `add_risktable()` adds a risk table below graph
    -   Allows for more customization and aesthetics

```{r}
#| eval: true
library(ggsurvfit) # Load ggsurvfit package)
km_fit |> ggsurvfit()  # Pass `survfit` object
```

## Customization (I)

-   **Customize the plot with `ggsurvfit`**
    -   `add_risktable()`: Adds a risk table below the survival curve
    -   `add_confidence_interval()`: Adds confidence intervals to the survival curve
    -   `add_pvalue()`: Adds p-value for log-rank test
    -   Other `ggplot2` functions to further customize the plot
        -   `scale_x_continuous()`, `scale_y_continuous()`, `theme()`, etc.

## Customization (II)

-   **Code**

```{r}
#| eval: true
# survfit2() fits better with `ggsurvfit`
km_fit2 <- survfit2(Surv(time, status > 0) ~ hormone,  
                    data = df |> # Relabel hormone variable
                      mutate(hormone = if_else(hormone == 1, "No hormone", "Hormone")) 
                      ) 
km_fig <- km_fit2 |>     # Plot KM curves with customization
  ggsurvfit() +          # Pass `survfit2` object                       
  add_risktable() +      # Add risk table below the graph
  add_confidence_interval() +   # Add confidence intervals                
  add_pvalue(caption = "Log-rank {p.value}") +  # Add p-value for log-rank test
  scale_x_continuous("Time (months)", breaks = seq(0, 84, 12)) + # x-axis format
  scale_y_continuous("Relapse-free survival probability", limits = c(0, 1)) + # y-axis format
  theme_classic() + # Use classic theme for this ggplot
  theme(legend.position = "top") # Position legend at the top

ggsave("images/km_fig.png", km_fig, width = 7.5, height = 5) # Save the plot
```

## Customization (III)

-   **Result**

![](images/km_fig.png){fig-align="center" width="100%"}

## Risk Table Exercise

-   **Task**: Display only numbers at risk in the risk table
    -   Hint: Add `risktable_stats = "n.risk"` argument in `add_risktable()`

```{r}
#| code-fold: true
#| code-summary: Solution
km_fit2 |>     # Plot KM curves with customization
  ggsurvfit() +          # Pass `survfit2` object                       
  add_risktable(         # Add risk table below the graph
    risktable_stats = "n.risk" # Show only number at risk
  ) +      
  add_confidence_interval() +   # Add confidence intervals                
  add_pvalue(caption = "Log-rank {p.value}") +  # Add p-value for log-rank test
  scale_x_continuous("Time (months)", breaks = seq(0, 84, 12)) + # x-axis format
  scale_y_continuous("Relapse-free survival probability", limits = c(0, 1)) + # y-axis format
  theme_classic() + # Use classic theme for this ggplot
  theme(legend.position = "top") # Position legend at the top
```

## Add Quantiles (I)

-   **Add quantile estimates to the plot**
    -   Use `add_quantile()` to add median survival time and other quantiles
    -   Specify `y_value` or `x_value` arguments for desired quantiles or time points

```{r}
km_fig + add_quantile(
    y_value = 0.5, # Add median survival time
  )
```

```{r}
#| echo: false
km_med_fig <- km_fig + add_quantile(
    y_value = 0.5 # Add median survival time
  )

ggsave("images/km_med_fig.png", km_med_fig, width = 7.5, height = 5) # Save the plot
```

## Add Quantiles (II)

-   **Result**

![](images/km_med_fig.png){fig-align="center" width="100%"}

## Exercise: Add Time Points

-   **Task**: Add reference lines at 72 months

    -   Use `add_quantile()` with `x_value` argument

    ```{r}
    #| echo: false
    km_time_fig <- km_fig + add_quantile(
       x_value = 72 # Add 72-month reference lines
      )
    ggsave("images/km_time_fig.png", km_time_fig, width = 7.5, height = 5) # Save the plot
    ```

```{r}
#| code-fold: true
#| code-summary: Solution
km_fig + add_quantile(
   x_value = 72 # Add 72-month reference lines
  )
```

## Further Customizations

-   **Customize the plot further**
    -   `add_risktable_strata_symbol(...)`: Use symbols for strata in the risk table
        -   `symbol = NULL`, `size = 15`, `face = "bold"`, etc.
    -   `add_censor_mark(...)`ï¼š Add censor marks to the survival curve
        -   `size = 3`, `shape = 3`, `color = "black"`, etc.
-   More about `ggsurvfit`
    -   [ggsurvfit](https://www.danieldsjoberg.com/ggsurvfit/) website
    -   [Webinar](https://www.danieldsjoberg.com/ggsurvfit-rmed-webinar-2024/) by Daniel D. Sjoberg

# Tidy Analysis of Competing Risks

## Competing Risks Overview

-   **Competing risks**
    -   Subject may experience at most one of multiple distinct types of event
    -   E.g., death from different causes; relapse vs. death in remission (before relapse)
-   **Notation**: $(T, \Delta)$
    -   $T$: time to event
    -   $\Delta$: event type indicator (e.g., 1 for relapse, 2 for death)
-   **Quantity of interest**
    -   cumulative incidence function (CIF), or sub-distribution $$
          F_k(t) = P(T \leq t, \Delta = k)
          $$
        -   Cumulative probability of event type $k$ by time $t$

## `tidycmprsk` Package

-   **Analysis of CIF** implemented in `cmprsk` package
    -   A "tidy" version is available in`tidycmprsk`package
    -   Simple interface, plays nicely with `gtsummary` and `ggsurvfit`
    -   Input data: `status`: must be a factor, with the first level indicating censoring and subsequent levels the competing risks

```{r}
#| eval: true

library(tidycmprsk) # Load tidycmprsk package
data("trial", package = "tidycmprsk") # Load trial data from tidycmprsk package
head(trial) # Display the first few rows of the data
```

## Nonpametric Inference

-   **Gray's estimator and test**

```{r}
#| eval: true
#| echo: false
# Fit cumulative incidence function (CIF) for competing risks
cif_fit <- cuminc(Surv(ttdeath, death_cr) ~ trt, trial)
```

```{r}
# Fit cumulative incidence function (CIF) for competing risks
cif_fit <- cuminc(Surv(ttdeath, death_cr) ~ trt, trial)
cif_fit # print results
#> â€¢ Failure type "death from cancer"
#> strata   time   n.risk   estimate   std.error   95% CI          
#> Drug A   5.00   97       0.000      0.000       NA, NA          
#> Drug A   10.0   94       0.020      0.014       0.004, 0.065    
#> Drug A   15.0   83       0.071      0.026       0.031, 0.134    
#> Drug A   20.0   61       0.173      0.039       0.106, 0.255    
#> Drug B   5.00   102      0.000      0.000       NA, NA          
#> Drug B   10.0   95       0.039      0.019       0.013, 0.090    
#> Drug B   15.0   75       0.167      0.037       0.102, 0.246    
#> Drug B   20.0   55       0.255      0.043       0.175, 0.343 
```

## Raw Output

-   **Raw output from `cuminc()` continued**

```{r}

#> â€¢ Failure type "death other causes"
#> strata   time   n.risk   estimate   std.error   95% CI          
#> Drug A   5.00   97       0.010      0.010       0.001, 0.050    
#> Drug A   10.0   94       0.020      0.014       0.004, 0.065    
#> Drug A   15.0   83       0.082      0.028       0.038, 0.147    
#> Drug A   20.0   61       0.204      0.041       0.131, 0.289    
#> Drug B   5.00   102      0.000      0.000       NA, NA          
#> Drug B   10.0   95       0.029      0.017       0.008, 0.077    
#> Drug B   15.0   75       0.098      0.030       0.050, 0.165    
#> Drug B   20.0   55       0.206      0.040       0.133, 0.289    
#> 
#> â€¢ Tests
#> outcome              statistic   df     p.value    
#> death from cancer    1.99        1.00   0.16       
#> death other causes   0.089       1.00   0.77       

```

## Tidy Output in `tibble`

-   **Use `broom` to tidy `cuminc` object**
    -   Useful for further analysis or visualization

```{r}
#| eval: true

tidy_cif <- tidy(cif_fit) # Tidy the CIF fit object
head(tidy_cif) # Display the first few rows of the tidy data
```

::: {.callout-note appearance="minimal"}
## Exercise

Tabulate CIF estimates with 95% confidence intervals at 5, 10, 15, and 20 months for each risk.
:::

## Tabulating CIF Estimates (I)

-   **Use `tbl_cuminc()` to create a table of CIF estimates**
    -   Similar syntax to `tbl_survfit()`
    -   `times`: time points for estimates
    -   `outcomes`: specify outcomes to include in the table (Default is the first outcome)

```{r}
# Tabulate CIF estimates with 95% confidence intervals
cif_fit |> # Pass `tidycuminc` object
  tbl_cuminc(
    outcomes = c("death from cancer", "death other causes"), # Specify outcomes
    times = c(10, 15, 20), # Time points for estimates
    label_header = "Month {time}" # Column label: "Month xx"
  )|> 
  add_p() # Add p-values from Gray's test
```

## Tabulating CIF Estimates (II)

-   **Result**

```{r}
#| echo: false
#| eval: true
# Tabulate CIF estimates with 95% confidence intervals
cif_fit |> # Pass `tidycuminc` object
  tbl_cuminc(
    outcomes = c("death from cancer", "death other causes"), # Specify outcomes
    times = c(10, 15, 20), # Time points for estimates
    label_header = "Month {time}" # Column label: "Month xx"
  ) |> 
  add_p() # Add p-values from Gray's test
```

## CIF Graphics (I)

-   **Plot CIF estimates with `ggsurvfit::ggcuminc()`**
    -   Similar syntax to `ggsurvfit()`
    -   `outcome`: specify outcome to plot

```{r}
cif_fit |> # Pass `tidycuminc` object
  ggcuminc(outcome = "death from cancer") + # Plot CIF for "death from cancer"
  add_confidence_interval() + # Add confidence intervals
  add_risktable() + # Add risk table below the graph
  add_pvalue(caption = "Gray's test {p.value}") + # Add p-value for Gray's test
  scale_x_continuous("Time (months)", breaks = seq(0, 24, 6)) + # x-axis format
  scale_y_continuous("Cumulative incidence function", limits = c(0, 0.5)) + # y-axis format
  ggtitle("Death from cancer") + # Title
  theme_classic() + # Use classic theme for this ggplot
  theme(legend.position = "top") # Position legend at the top
```

```{r}
#| echo: false

ggsave("images/cif_fig.png", cif_fit |> # Pass `tidycuminc` object
  ggcuminc(outcome = "death from cancer") + # Plot CIF for "death from cancer"
  add_confidence_interval() + # Add confidence intervals
  add_risktable() + # Add risk table below the graph
  add_pvalue(caption = "Gray's test {p.value}") + # Add p-value for Gray's test
  scale_x_continuous("Time (months)", breaks = seq(0, 24, 6)) + # x-axis format
  scale_y_continuous("Cumulative incidence function", limits = c(0, 0.5)) + # y-axis format
  ggtitle("Death from cancer") + # Title
  theme_classic() + # Use classic theme for this ggplot
  theme(legend.position = "top"), width = 7.5, height = 5) # Save the plot
```

## CIF Graphics (II)

-   **Result**

![](images/cif_fig.png){fig-align="center" width="100%"}

## CIF Graphics Exercise (I)

-   **Task**: create the figure below
    -   **Hint**: plot separate figures for each outcome and use `patchwork` to combine them

```{r}
#| echo: false
# Function to create CIF plot for a given outcome
cif_plot <- function(cif_fit, outcome){
  cif_fit |> # Pass `tidycuminc` object
    ggcuminc(outcome = outcome) + # Plot CIF for "death from cancer"
    add_confidence_interval() + # Add confidence intervals
    # add_risktable(risktable_stats = "n.risk") + # Add risk table below the graph
    # add_pvalue(caption = "Gray's test {p.value}") + # Add p-value for Gray's test
    scale_x_continuous("Time (months)", breaks = seq(0, 24, 6)) + # x-axis format
    scale_y_continuous("Cumulative incidence function", limits = c(0, 0.5)) + # y-axis format
    ggtitle(str_to_sentence(outcome)) + # Title by capitalizing initial of first word in outcome
    theme_classic() + # Use classic theme for this ggplot
    theme(legend.position = "top") # Position legend at the top
  
}

cif_cancer_plot <- cif_plot(cif_fit, "death from cancer") # Plot for "death from cancer" 
cif_other_plot <- cif_plot(cif_fit, "death other causes") # Plot for "death other causes"

library(patchwork) # Load patchwork package
# Combine the two plots with patchwork
cif_trial <- cif_cancer_plot + cif_other_plot + plot_layout(guides = "collect") &
  theme(legend.position = "top") # Collect legends and position at the top

ggsave("images/cif_combined_fig.png", cif_trial, width = 8, height = 4) # Save the combined plot
```

![](images/cif_combined_fig.png){fig-align="center" width="100%"}

## CIF Graphics Exercise (II)

```{r}
#| code-fold: true
#| code-summary: Solution
# Function to create CIF plot for a given outcome
cif_plot <- function(cif_fit, outcome){
  cif_fit |> # Pass `tidycuminc` object
    ggcuminc(outcome = outcome) + # Plot CIF for specified outcome
    add_confidence_interval() + # Add confidence intervals
    scale_x_continuous("Time (months)", breaks = seq(0, 24, 6)) + # x-axis format
    scale_y_continuous("Cumulative incidence function", limits = c(0, 0.5)) + # y-axis format
    ggtitle(str_to_sentence(outcome)) + # Title by capitalizing initial of first word in outcome
    theme_classic() + # Use classic theme for this ggplot
    theme(legend.position = "top") # Position legend at the top
  
}

cif_cancer_plot <- cif_plot(cif_fit, "death from cancer") # Plot for "death from cancer" 
cif_other_plot <- cif_plot(cif_fit, "death other causes") # Plot for "death other causes"

library(patchwork) # Load patchwork package
# Combine the two plots with patchwork
cif_trial <- cif_cancer_plot + cif_other_plot + plot_layout(guides = "collect") &
  theme(legend.position = "top") # Collect legends and position at the top
```

-   More about `tidycmprsk`
    -   [tidycmprsk](https://www.danieldsjoberg.com/tidycmprsk/) website

# Summary

## Key Takeaways

-   **Nonparametric survival analysis**
    -   Use `survival::survfit()` for Kaplan-Meier estimates
    -   Use `tidycmprsk::cuminc()` for CIF of competing risks
-   **Tidy outputs**
    -   Use `broom::tidy()` to convert `survfit` and `tidycuminc` objects into tidy data frames
-   **Tabulation and visualization**
    -   Use `gtsummary::tbl_survfit()` and `tidycumprsk::tbl_cuminc()` for tabulating survival estimates
    -   Use `ggsurvfit::ggsurvfit()` and `ggsurvfit::ggcuminc()` for visualizing survival curves and CIF

## Next Steps

-   **Cox regression analysis**
    -   Tidy and format results from `survival::coxph()`
    -   Visualize prediction results
-   **Competing risks**
    -   Proportional sub-distribution hazards (Fine-Gray) regression
    -   Tabulation and graphics
